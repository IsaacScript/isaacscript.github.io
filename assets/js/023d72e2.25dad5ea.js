"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8746],{13924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var s=n(31085),c=n(71184);const r={custom_edit_url:null},i="Immutable",l={id:"isaacscript-common/other/types/Immutable",title:"Immutable",description:"Type Aliases",source:"@site/docs/isaacscript-common/other/types/Immutable.md",sourceDirName:"isaacscript-common/other/types",slug:"/isaacscript-common/other/types/Immutable",permalink:"/isaacscript-common/other/types/Immutable",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{custom_edit_url:null},sidebar:"isaacScriptCommon",previous:{title:"IRange",permalink:"/isaacscript-common/other/types/IRange"},next:{title:"Increment",permalink:"/isaacscript-common/other/types/Increment"}},a={},o=[{value:"Type Aliases",id:"type-aliases",level:2},{value:"Immutable",id:"immutable-1",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Defined in",id:"defined-in",level:4}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"immutable",children:"Immutable"}),"\n",(0,s.jsx)(t.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,s.jsx)(t.h3,{id:"immutable-1",children:"Immutable"}),"\n",(0,s.jsxs)(t.p,{children:["\u01ac ",(0,s.jsx)(t.strong,{children:"Immutable"}),"<",(0,s.jsx)(t.code,{children:"T"}),">: ",(0,s.jsx)(t.code,{children:"T"})," extends ",(0,s.jsx)(t.code,{children:"ImmutablePrimitive"})," ? ",(0,s.jsx)(t.code,{children:"T"})," : ",(0,s.jsx)(t.code,{children:"T"})," extends infer U[] ? ",(0,s.jsx)(t.code,{children:"ImmutableArray"}),"<",(0,s.jsx)(t.code,{children:"U"}),"> : ",(0,s.jsx)(t.code,{children:"T"})," extends ",(0,s.jsx)(t.code,{children:"Map"}),"<infer K, infer V> ? ",(0,s.jsx)(t.code,{children:"ImmutableMap"}),"<",(0,s.jsx)(t.code,{children:"K"}),", ",(0,s.jsx)(t.code,{children:"V"}),"> : ",(0,s.jsx)(t.code,{children:"T"})," extends ",(0,s.jsx)(t.code,{children:"Set"}),"<infer M> ? ",(0,s.jsx)(t.code,{children:"ImmutableSet"}),"<",(0,s.jsx)(t.code,{children:"M"}),"> : ",(0,s.jsx)(t.code,{children:"ImmutableObject"}),"<",(0,s.jsx)(t.code,{children:"T"}),">"]}),"\n",(0,s.jsx)(t.p,{children:"Helper type to make the given array/map/set/object recursively read-only."}),"\n",(0,s.jsx)(t.p,{children:"You can use this type to easily build safe data structures."}),"\n",(0,s.jsxs)(t.p,{children:["From: ",(0,s.jsx)(t.a,{href:"https://stackoverflow.com/questions/41879327/deepreadonly-object-typescript",children:"https://stackoverflow.com/questions/41879327/deepreadonly-object-typescript"})]}),"\n",(0,s.jsx)(t.h4,{id:"type-parameters",children:"Type parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Name"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"T"})})})})]}),"\n",(0,s.jsx)(t.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/types/Immutable.ts#L8",children:"packages/isaacscript-common/src/types/Immutable.ts:8"})})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(14041);const c={},r=s.createContext(c);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);