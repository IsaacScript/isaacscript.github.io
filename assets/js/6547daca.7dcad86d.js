"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60158],{43425:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>o,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var t=n(31085),l=n(71184);const s={custom_edit_url:null},r="Familiars",a={id:"isaacscript-common/functions/familiars",title:"Familiars",description:"Functions",source:"@site/docs/isaacscript-common/functions/familiars.md",sourceDirName:"isaacscript-common/functions",slug:"/isaacscript-common/functions/familiars",permalink:"/isaacscript-common/functions/familiars",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{custom_edit_url:null},sidebar:"isaacScriptCommon",previous:{title:"External",permalink:"/isaacscript-common/functions/external"},next:{title:"Flag",permalink:"/isaacscript-common/functions/flag"}},c={},d=[{value:"Functions",id:"functions",level:2},{value:"checkFamiliar",id:"checkfamiliar",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"checkFamiliarFromCollectibles",id:"checkfamiliarfromcollectibles",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getPlayerFamiliars",id:"getplayerfamiliars",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getSirenHelper",id:"getsirenhelper",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"isFamiliarStolenBySiren",id:"isfamiliarstolenbysiren",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"isFamiliarThatShootsPlayerTears",id:"isfamiliarthatshootsplayertears",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4}];function h(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"familiars",children:"Familiars"}),"\n",(0,t.jsx)(i.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(i.h3,{id:"checkfamiliar",children:"checkFamiliar"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"checkFamiliar"}),"(",(0,t.jsx)(i.code,{children:"player"}),", ",(0,t.jsx)(i.code,{children:"collectibleType"}),", ",(0,t.jsx)(i.code,{children:"targetCount"}),", ",(0,t.jsx)(i.code,{children:"familiarVariant"}),", ",(0,t.jsx)(i.code,{children:"familiarSubType?"}),"): ",(0,t.jsx)(i.code,{children:"void"})]}),"\n",(0,t.jsx)(i.p,{children:"Helper function to add and remove familiars based on a target amount that you specify."}),"\n",(0,t.jsxs)(i.p,{children:["This is a convenience wrapper around the ",(0,t.jsx)(i.code,{children:"EntityPlayer.CheckFamiliar"})," method. Use this helper\nfunction instead so that you do not have to retrieve the ",(0,t.jsx)(i.code,{children:"ItemConfigItem"})," and so that you do not\nspecify an incorrect RNG object. (The vanilla method is bugged in that it does not increment the\nRNG object; see the documentation of the method for more details.)"]}),"\n",(0,t.jsxs)(i.p,{children:["This function is meant to be called in the ",(0,t.jsx)(i.code,{children:"EVALUATE_CACHE"})," callback (when the cache flag is\nequal to ",(0,t.jsx)(i.code,{children:"CacheFlag.FAMILIARS"}),")."]}),"\n",(0,t.jsxs)(i.p,{children:["Note that this function is only meant to be used in special circumstances where the familiar\ncount is completely custom and does not correspond to the amount of collectibles. For the general\ncase, use the ",(0,t.jsx)(i.code,{children:"checkFamiliarFromCollectibles"})," helper function instead."]}),"\n",(0,t.jsxs)(i.p,{children:["Note that this will spawn familiars with a completely random ",(0,t.jsx)(i.code,{children:"InitSeed"}),". When calculating random\nevents for this familiar, you should use a data structure that maps familiar ",(0,t.jsx)(i.code,{children:"InitSeed"})," to RNG\nobjects that are initialized based on the seed from\n",(0,t.jsx)(i.code,{children:"EntityPlayer.GetCollectibleRNG(collectibleType)"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"player"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityPlayer"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The player that owns the familiars."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"collectibleType"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"CollectibleType"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The collectible type of the collectible associated with this familiar."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"targetCount"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"int"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The number of familiars that should exist. This function will add or remove familiars until it matches the target count."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiarVariant"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"FamiliarVariant"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The variant of the familiar to spawn or remove."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiarSubType?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"int"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"Optional. The sub-type of the familiar to spawn or remove. If not specified, it will search for existing familiars of all sub-types, and spawn new familiars with a sub-type of 0."})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"void"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L48",children:"packages/isaacscript-common/src/functions/familiars.ts:48"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"checkfamiliarfromcollectibles",children:"checkFamiliarFromCollectibles"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"checkFamiliarFromCollectibles"}),"(",(0,t.jsx)(i.code,{children:"player"}),", ",(0,t.jsx)(i.code,{children:"collectibleType"}),", ",(0,t.jsx)(i.code,{children:"familiarVariant"}),", ",(0,t.jsx)(i.code,{children:"familiarSubType?"}),"): ",(0,t.jsx)(i.code,{children:"void"})]}),"\n",(0,t.jsx)(i.p,{children:"Helper function to add and remove familiars based on the amount of associated collectibles that a\nplayer has."}),"\n",(0,t.jsxs)(i.p,{children:["Use this helper function instead of invoking the ",(0,t.jsx)(i.code,{children:"EntityPlayer.CheckFamiliar"})," method directly so\nthat the target count is handled automatically."]}),"\n",(0,t.jsxs)(i.p,{children:["This function is meant to be called in the ",(0,t.jsx)(i.code,{children:"EVALUATE_CACHE"})," callback (when the cache flag is\nequal to ",(0,t.jsx)(i.code,{children:"CacheFlag.FAMILIARS"}),")."]}),"\n",(0,t.jsxs)(i.p,{children:["Use this function when the amount of familiars should be equal to the amount of associated\ncollectibles that the player has (plus any extras from having used Box of Friends or Monster\nManual). If you instead need to have a custom amount of familiars, use the ",(0,t.jsx)(i.code,{children:"checkFamiliars"}),"\nfunction instead."]}),"\n",(0,t.jsxs)(i.p,{children:["Note that this will spawn familiars with a completely random ",(0,t.jsx)(i.code,{children:"InitSeed"}),". When calculating random\nevents for this familiar, you should use a data structure that maps familiar ",(0,t.jsx)(i.code,{children:"InitSeed"})," to RNG\nobjects that are initialized based on the seed from\n",(0,t.jsx)(i.code,{children:"EntityPlayer.GetCollectibleRNG(collectibleType)"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"player"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityPlayer"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The player that owns the familiars and collectibles."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"collectibleType"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"CollectibleType"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The collectible type of the collectible associated with this familiar."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiarVariant"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"FamiliarVariant"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The variant of the familiar to spawn or remove."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiarSubType?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"int"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"Optional. The sub-type of the familiar to spawn or remove. If not specified, it will search for existing familiars of all sub-types, and spawn new familiars with a sub-type of 0."})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"void"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L94",children:"packages/isaacscript-common/src/functions/familiars.ts:94"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"getplayerfamiliars",children:"getPlayerFamiliars"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"getPlayerFamiliars"}),"(",(0,t.jsx)(i.code,{children:"player"}),"): readonly ",(0,t.jsx)(i.code,{children:"EntityFamiliar"}),"[]"]}),"\n",(0,t.jsx)(i.p,{children:"Helper function to get only the familiars that belong to a specific player."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"player"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityPlayer"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsxs)(i.p,{children:["readonly ",(0,t.jsx)(i.code,{children:"EntityFamiliar"}),"[]"]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L121",children:"packages/isaacscript-common/src/functions/familiars.ts:121"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"getsirenhelper",children:"getSirenHelper"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"getSirenHelper"}),"(",(0,t.jsx)(i.code,{children:"familiar"}),"): ",(0,t.jsx)(i.code,{children:"Entity"})," | ",(0,t.jsx)(i.code,{children:"undefined"})]}),"\n",(0,t.jsx)(i.p,{children:'Helper function to get the corresponding "Siren Helper" entity for a stolen familiar.'}),"\n",(0,t.jsx)(i.p,{children:'When The Siren boss "steals" your familiars, a hidden "Siren Helper" entity is spawned to control\neach familiar stolen. (Checking for the presence of this entity seems to be the only way to\ndetect when the Siren steals a familiar.)'}),"\n",(0,t.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiar"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityFamiliar"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The familiar to be checked."})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"Entity"})," | ",(0,t.jsx)(i.code,{children:"undefined"})]}),"\n",(0,t.jsx)(i.p,{children:'Returns the hidden "Siren Helper" entity corresponding to the given familiar, if it\nexists. Returns undefined otherwise.'}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L143",children:"packages/isaacscript-common/src/functions/familiars.ts:143"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"isfamiliarstolenbysiren",children:"isFamiliarStolenBySiren"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"isFamiliarStolenBySiren"}),"(",(0,t.jsx)(i.code,{children:"familiar"}),"): ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.p,{children:'Helper function to detect if the given familiar is "stolen" by The Siren boss.'}),"\n",(0,t.jsx)(i.p,{children:"This function is useful because some familiars may need to behave differently when under The\nSiren's control (e.g. if they auto-target enemies)."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiar"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityFamiliar"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"boolean"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L160",children:"packages/isaacscript-common/src/functions/familiars.ts:160"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"isfamiliarthatshootsplayertears",children:"isFamiliarThatShootsPlayerTears"}),"\n",(0,t.jsxs)(i.p,{children:["\u25b8 ",(0,t.jsx)(i.strong,{children:"isFamiliarThatShootsPlayerTears"}),"(",(0,t.jsx)(i.code,{children:"familiar"}),"): ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.p,{children:"Helper function to check if a familiar is the type that shoots tears that mimic the players\ntears, like Incubus, Fate's Reward, Sprinkler, and so on."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"familiar"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"EntityFamiliar"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"boolean"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/familiars.ts#L169",children:"packages/isaacscript-common/src/functions/familiars.ts:169"})})]})}function o(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},71184:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(14041);const l={},s=t.createContext(l);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);