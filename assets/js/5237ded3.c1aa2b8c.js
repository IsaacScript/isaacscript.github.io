"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[51910],{30503:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=n(31085),a=n(71184);const s={custom_edit_url:null},l="ModCallbackCustom",c={id:"isaacscript-common/other/enums/ModCallbackCustom",title:"ModCallbackCustom",description:"- The Isaac API offers a lot of callbacks, but a lot of times there isn't one for the specific",source:"@site/docs/isaacscript-common/other/enums/ModCallbackCustom.md",sourceDirName:"isaacscript-common/other/enums",slug:"/isaacscript-common/other/enums/ModCallbackCustom",permalink:"/isaacscript-common/other/enums/ModCallbackCustom",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{custom_edit_url:null},sidebar:"isaacScriptCommon",previous:{title:"LadderSubTypeCustom",permalink:"/isaacscript-common/other/enums/LadderSubTypeCustom"},next:{title:"MysteriousPaperEffect",permalink:"/isaacscript-common/other/enums/MysteriousPaperEffect"}},r={},d=[{value:"Enumeration Members",id:"enumeration-members",level:2},{value:"ENTITY_TAKE_DMG_FILTER",id:"entity_take_dmg_filter",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"ENTITY_TAKE_DMG_PLAYER",id:"entity_take_dmg_player",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"INPUT_ACTION_FILTER",id:"input_action_filter",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"INPUT_ACTION_PLAYER",id:"input_action_player",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"POST_AMBUSH_FINISHED",id:"post_ambush_finished",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"POST_AMBUSH_STARTED",id:"post_ambush_started",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"POST_BOMB_EXPLODED",id:"post_bomb_exploded",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"POST_BOMB_INIT_FILTER",id:"post_bomb_init_filter",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"POST_BOMB_INIT_LATE",id:"post_bomb_init_late",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"POST_BOMB_RENDER_FILTER",id:"post_bomb_render_filter",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"POST_BOMB_UPDATE_FILTER",id:"post_bomb_update_filter",level:3},{value:"Defined in",id:"defined-in-10",level:4},{value:"POST_BONE_SWING",id:"post_bone_swing",level:3},{value:"Defined in",id:"defined-in-11",level:4},{value:"POST_COLLECTIBLE_EMPTY",id:"post_collectible_empty",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"POST_CURSED_TELEPORT",id:"post_cursed_teleport",level:3},{value:"Defined in",id:"defined-in-13",level:4},{value:"POST_CUSTOM_REVIVE",id:"post_custom_revive",level:3},{value:"Defined in",id:"defined-in-14",level:4},{value:"POST_DICE_ROOM_ACTIVATED",id:"post_dice_room_activated",level:3},{value:"Defined in",id:"defined-in-15",level:4},{value:"POST_DOOR_RENDER",id:"post_door_render",level:3},{value:"Defined in",id:"defined-in-16",level:4},{value:"POST_DOOR_UPDATE",id:"post_door_update",level:3},{value:"Defined in",id:"defined-in-17",level:4},{value:"POST_EFFECT_INIT_FILTER",id:"post_effect_init_filter",level:3},{value:"Defined in",id:"defined-in-18",level:4},{value:"POST_EFFECT_INIT_LATE",id:"post_effect_init_late",level:3},{value:"Defined in",id:"defined-in-19",level:4},{value:"POST_EFFECT_RENDER_FILTER",id:"post_effect_render_filter",level:3},{value:"Defined in",id:"defined-in-20",level:4},{value:"POST_EFFECT_STATE_CHANGED",id:"post_effect_state_changed",level:3},{value:"Defined in",id:"defined-in-21",level:4},{value:"POST_EFFECT_UPDATE_FILTER",id:"post_effect_update_filter",level:3},{value:"Defined in",id:"defined-in-22",level:4},{value:"POST_ENTITY_KILL_FILTER",id:"post_entity_kill_filter",level:3},{value:"Defined in",id:"defined-in-23",level:4},{value:"POST_ESAU_JR",id:"post_esau_jr",level:3},{value:"Defined in",id:"defined-in-24",level:4},{value:"POST_FAMILIAR_INIT_FILTER",id:"post_familiar_init_filter",level:3},{value:"Defined in",id:"defined-in-25",level:4},{value:"POST_FAMILIAR_INIT_LATE",id:"post_familiar_init_late",level:3},{value:"Defined in",id:"defined-in-26",level:4},{value:"POST_FAMILIAR_RENDER_FILTER",id:"post_familiar_render_filter",level:3},{value:"Defined in",id:"defined-in-27",level:4},{value:"POST_FAMILIAR_STATE_CHANGED",id:"post_familiar_state_changed",level:3},{value:"Defined in",id:"defined-in-28",level:4},{value:"POST_FAMILIAR_UPDATE_FILTER",id:"post_familiar_update_filter",level:3},{value:"Defined in",id:"defined-in-29",level:4},{value:"POST_FIRST_ESAU_JR",id:"post_first_esau_jr",level:3},{value:"Defined in",id:"defined-in-30",level:4},{value:"POST_FIRST_FLIP",id:"post_first_flip",level:3},{value:"Defined in",id:"defined-in-31",level:4},{value:"POST_FLIP",id:"post_flip",level:3},{value:"Defined in",id:"defined-in-32",level:4},{value:"POST_GAME_END_FILTER",id:"post_game_end_filter",level:3},{value:"Defined in",id:"defined-in-33",level:4},{value:"POST_GAME_STARTED_REORDERED",id:"post_game_started_reordered",level:3},{value:"Defined in",id:"defined-in-34",level:4},{value:"POST_GAME_STARTED_REORDERED_LAST",id:"post_game_started_reordered_last",level:3},{value:"Defined in",id:"defined-in-35",level:4},{value:"POST_GREED_MODE_WAVE",id:"post_greed_mode_wave",level:3},{value:"Defined in",id:"defined-in-36",level:4},{value:"POST_GRID_ENTITY_BROKEN",id:"post_grid_entity_broken",level:3},{value:"Defined in",id:"defined-in-37",level:4},{value:"POST_GRID_ENTITY_COLLISION",id:"post_grid_entity_collision",level:3},{value:"Defined in",id:"defined-in-38",level:4},{value:"POST_GRID_ENTITY_CUSTOM_BROKEN",id:"post_grid_entity_custom_broken",level:3},{value:"Defined in",id:"defined-in-39",level:4},{value:"POST_GRID_ENTITY_CUSTOM_COLLISION",id:"post_grid_entity_custom_collision",level:3},{value:"Defined in",id:"defined-in-40",level:4},{value:"POST_GRID_ENTITY_CUSTOM_INIT",id:"post_grid_entity_custom_init",level:3},{value:"Defined in",id:"defined-in-41",level:4},{value:"POST_GRID_ENTITY_CUSTOM_REMOVE",id:"post_grid_entity_custom_remove",level:3},{value:"Defined in",id:"defined-in-42",level:4},{value:"POST_GRID_ENTITY_CUSTOM_RENDER",id:"post_grid_entity_custom_render",level:3},{value:"Defined in",id:"defined-in-43",level:4},{value:"POST_GRID_ENTITY_CUSTOM_STATE_CHANGED",id:"post_grid_entity_custom_state_changed",level:3},{value:"Defined in",id:"defined-in-44",level:4},{value:"POST_GRID_ENTITY_CUSTOM_UPDATE",id:"post_grid_entity_custom_update",level:3},{value:"Defined in",id:"defined-in-45",level:4},{value:"POST_GRID_ENTITY_INIT",id:"post_grid_entity_init",level:3},{value:"Defined in",id:"defined-in-46",level:4},{value:"POST_GRID_ENTITY_REMOVE",id:"post_grid_entity_remove",level:3},{value:"Defined in",id:"defined-in-47",level:4},{value:"POST_GRID_ENTITY_RENDER",id:"post_grid_entity_render",level:3},{value:"Defined in",id:"defined-in-48",level:4},{value:"POST_GRID_ENTITY_STATE_CHANGED",id:"post_grid_entity_state_changed",level:3},{value:"Defined in",id:"defined-in-49",level:4},{value:"POST_GRID_ENTITY_UPDATE",id:"post_grid_entity_update",level:3},{value:"Defined in",id:"defined-in-50",level:4},{value:"POST_HOLY_MANTLE_REMOVED",id:"post_holy_mantle_removed",level:3},{value:"Defined in",id:"defined-in-51",level:4},{value:"POST_ITEM_DISCHARGE",id:"post_item_discharge",level:3},{value:"Defined in",id:"defined-in-52",level:4},{value:"POST_ITEM_PICKUP",id:"post_item_pickup",level:3},{value:"Defined in",id:"defined-in-53",level:4},{value:"POST_KEYBOARD_CHANGED",id:"post_keyboard_changed",level:3},{value:"Defined in",id:"defined-in-54",level:4},{value:"POST_KNIFE_INIT_FILTER",id:"post_knife_init_filter",level:3},{value:"Defined in",id:"defined-in-55",level:4},{value:"POST_KNIFE_INIT_LATE",id:"post_knife_init_late",level:3},{value:"Defined in",id:"defined-in-56",level:4},{value:"POST_KNIFE_RENDER_FILTER",id:"post_knife_render_filter",level:3},{value:"Defined in",id:"defined-in-57",level:4},{value:"POST_KNIFE_UPDATE_FILTER",id:"post_knife_update_filter",level:3},{value:"Defined in",id:"defined-in-58",level:4},{value:"POST_LASER_INIT_FILTER",id:"post_laser_init_filter",level:3},{value:"Defined in",id:"defined-in-59",level:4},{value:"POST_LASER_INIT_LATE",id:"post_laser_init_late",level:3},{value:"Defined in",id:"defined-in-60",level:4},{value:"POST_LASER_RENDER_FILTER",id:"post_laser_render_filter",level:3},{value:"Defined in",id:"defined-in-61",level:4},{value:"POST_LASER_UPDATE_FILTER",id:"post_laser_update_filter",level:3},{value:"Defined in",id:"defined-in-62",level:4},{value:"POST_NEW_LEVEL_REORDERED",id:"post_new_level_reordered",level:3},{value:"Defined in",id:"defined-in-63",level:4},{value:"POST_NEW_ROOM_EARLY",id:"post_new_room_early",level:3},{value:"Defined in",id:"defined-in-64",level:4},{value:"POST_NEW_ROOM_REORDERED",id:"post_new_room_reordered",level:3},{value:"Defined in",id:"defined-in-65",level:4},{value:"POST_NPC_DEATH_FILTER",id:"post_npc_death_filter",level:3},{value:"Defined in",id:"defined-in-66",level:4},{value:"POST_NPC_INIT_FILTER",id:"post_npc_init_filter",level:3},{value:"Defined in",id:"defined-in-67",level:4},{value:"POST_NPC_INIT_LATE",id:"post_npc_init_late",level:3},{value:"Defined in",id:"defined-in-68",level:4},{value:"POST_NPC_RENDER_FILTER",id:"post_npc_render_filter",level:3},{value:"Defined in",id:"defined-in-69",level:4},{value:"POST_NPC_STATE_CHANGED",id:"post_npc_state_changed",level:3},{value:"Defined in",id:"defined-in-70",level:4},{value:"POST_NPC_UPDATE_FILTER",id:"post_npc_update_filter",level:3},{value:"Defined in",id:"defined-in-71",level:4},{value:"POST_PEFFECT_UPDATE_REORDERED",id:"post_peffect_update_reordered",level:3},{value:"Defined in",id:"defined-in-72",level:4},{value:"POST_PICKUP_CHANGED",id:"post_pickup_changed",level:3},{value:"Defined in",id:"defined-in-73",level:4},{value:"POST_PICKUP_COLLECT",id:"post_pickup_collect",level:3},{value:"Defined in",id:"defined-in-74",level:4},{value:"POST_PICKUP_INIT_FILTER",id:"post_pickup_init_filter",level:3},{value:"Defined in",id:"defined-in-75",level:4},{value:"POST_PICKUP_INIT_FIRST",id:"post_pickup_init_first",level:3},{value:"Defined in",id:"defined-in-76",level:4},{value:"POST_PICKUP_INIT_LATE",id:"post_pickup_init_late",level:3},{value:"Defined in",id:"defined-in-77",level:4},{value:"POST_PICKUP_RENDER_FILTER",id:"post_pickup_render_filter",level:3},{value:"Defined in",id:"defined-in-78",level:4},{value:"POST_PICKUP_SELECTION_FILTER",id:"post_pickup_selection_filter",level:3},{value:"Defined in",id:"defined-in-79",level:4},{value:"POST_PICKUP_STATE_CHANGED",id:"post_pickup_state_changed",level:3},{value:"Defined in",id:"defined-in-80",level:4},{value:"POST_PICKUP_UPDATE_FILTER",id:"post_pickup_update_filter",level:3},{value:"Defined in",id:"defined-in-81",level:4},{value:"POST_PIT_RENDER",id:"post_pit_render",level:3},{value:"Defined in",id:"defined-in-82",level:4},{value:"POST_PIT_UPDATE",id:"post_pit_update",level:3},{value:"Defined in",id:"defined-in-83",level:4},{value:"POST_PLAYER_CHANGE_HEALTH",id:"post_player_change_health",level:3},{value:"Defined in",id:"defined-in-84",level:4},{value:"POST_PLAYER_CHANGE_STAT",id:"post_player_change_stat",level:3},{value:"Defined in",id:"defined-in-85",level:4},{value:"POST_PLAYER_CHANGE_TYPE",id:"post_player_change_type",level:3},{value:"Defined in",id:"defined-in-86",level:4},{value:"POST_PLAYER_COLLECTIBLE_ADDED",id:"post_player_collectible_added",level:3},{value:"Defined in",id:"defined-in-87",level:4},{value:"POST_PLAYER_COLLECTIBLE_REMOVED",id:"post_player_collectible_removed",level:3},{value:"Defined in",id:"defined-in-88",level:4},{value:"POST_PLAYER_FATAL_DAMAGE",id:"post_player_fatal_damage",level:3},{value:"Defined in",id:"defined-in-89",level:4},{value:"POST_PLAYER_INIT_FIRST",id:"post_player_init_first",level:3},{value:"Defined in",id:"defined-in-90",level:4},{value:"POST_PLAYER_INIT_LATE",id:"post_player_init_late",level:3},{value:"Defined in",id:"defined-in-91",level:4},{value:"POST_PLAYER_RENDER_REORDERED",id:"post_player_render_reordered",level:3},{value:"Defined in",id:"defined-in-92",level:4},{value:"POST_PLAYER_UPDATE_REORDERED",id:"post_player_update_reordered",level:3},{value:"Defined in",id:"defined-in-93",level:4},{value:"POST_POOP_RENDER",id:"post_poop_render",level:3},{value:"Defined in",id:"defined-in-94",level:4},{value:"POST_POOP_UPDATE",id:"post_poop_update",level:3},{value:"Defined in",id:"defined-in-95",level:4},{value:"POST_PRESSURE_PLATE_RENDER",id:"post_pressure_plate_render",level:3},{value:"Defined in",id:"defined-in-96",level:4},{value:"POST_PRESSURE_PLATE_UPDATE",id:"post_pressure_plate_update",level:3},{value:"Defined in",id:"defined-in-97",level:4},{value:"POST_PROJECTILE_INIT_FILTER",id:"post_projectile_init_filter",level:3},{value:"Defined in",id:"defined-in-98",level:4},{value:"POST_PROJECTILE_INIT_LATE",id:"post_projectile_init_late",level:3},{value:"Defined in",id:"defined-in-99",level:4},{value:"POST_PROJECTILE_KILL",id:"post_projectile_kill",level:3},{value:"Defined in",id:"defined-in-100",level:4},{value:"POST_PROJECTILE_RENDER_FILTER",id:"post_projectile_render_filter",level:3},{value:"Defined in",id:"defined-in-101",level:4},{value:"POST_PROJECTILE_UPDATE_FILTER",id:"post_projectile_update_filter",level:3},{value:"Defined in",id:"defined-in-102",level:4},{value:"POST_PURCHASE",id:"post_purchase",level:3},{value:"Defined in",id:"defined-in-103",level:4},{value:"POST_ROCK_RENDER",id:"post_rock_render",level:3},{value:"Defined in",id:"defined-in-104",level:4},{value:"POST_ROCK_UPDATE",id:"post_rock_update",level:3},{value:"Defined in",id:"defined-in-105",level:4},{value:"POST_ROOM_CLEAR_CHANGED",id:"post_room_clear_changed",level:3},{value:"Defined in",id:"defined-in-106",level:4},{value:"POST_SACRIFICE",id:"post_sacrifice",level:3},{value:"Defined in",id:"defined-in-107",level:4},{value:"POST_SLOT_ANIMATION_CHANGED",id:"post_slot_animation_changed",level:3},{value:"Defined in",id:"defined-in-108",level:4},{value:"POST_SLOT_COLLISION",id:"post_slot_collision",level:3},{value:"Defined in",id:"defined-in-109",level:4},{value:"POST_SLOT_DESTROYED",id:"post_slot_destroyed",level:3},{value:"Defined in",id:"defined-in-110",level:4},{value:"POST_SLOT_INIT",id:"post_slot_init",level:3},{value:"Defined in",id:"defined-in-111",level:4},{value:"POST_SLOT_RENDER",id:"post_slot_render",level:3},{value:"Defined in",id:"defined-in-112",level:4},{value:"POST_SLOT_UPDATE",id:"post_slot_update",level:3},{value:"Defined in",id:"defined-in-113",level:4},{value:"POST_SPIKES_RENDER",id:"post_spikes_render",level:3},{value:"Defined in",id:"defined-in-114",level:4},{value:"POST_SPIKES_UPDATE",id:"post_spikes_update",level:3},{value:"Defined in",id:"defined-in-115",level:4},{value:"POST_TEAR_INIT_FILTER",id:"post_tear_init_filter",level:3},{value:"Defined in",id:"defined-in-116",level:4},{value:"POST_TEAR_INIT_LATE",id:"post_tear_init_late",level:3},{value:"Defined in",id:"defined-in-117",level:4},{value:"POST_TEAR_INIT_VERY_LATE",id:"post_tear_init_very_late",level:3},{value:"Defined in",id:"defined-in-118",level:4},{value:"POST_TEAR_KILL",id:"post_tear_kill",level:3},{value:"Defined in",id:"defined-in-119",level:4},{value:"POST_TEAR_RENDER_FILTER",id:"post_tear_render_filter",level:3},{value:"Defined in",id:"defined-in-120",level:4},{value:"POST_TEAR_UPDATE_FILTER",id:"post_tear_update_filter",level:3},{value:"Defined in",id:"defined-in-121",level:4},{value:"POST_TNT_RENDER",id:"post_tnt_render",level:3},{value:"Defined in",id:"defined-in-122",level:4},{value:"POST_TNT_UPDATE",id:"post_tnt_update",level:3},{value:"Defined in",id:"defined-in-123",level:4},{value:"POST_TRANSFORMATION",id:"post_transformation",level:3},{value:"Defined in",id:"defined-in-124",level:4},{value:"POST_TRINKET_BREAK",id:"post_trinket_break",level:3},{value:"Defined in",id:"defined-in-125",level:4},{value:"POST_USE_PILL_FILTER",id:"post_use_pill_filter",level:3},{value:"Defined in",id:"defined-in-126",level:4},{value:"PRE_BERSERK_DEATH",id:"pre_berserk_death",level:3},{value:"Defined in",id:"defined-in-127",level:4},{value:"PRE_BOMB_COLLISION_FILTER",id:"pre_bomb_collision_filter",level:3},{value:"Defined in",id:"defined-in-128",level:4},{value:"PRE_CUSTOM_REVIVE",id:"pre_custom_revive",level:3},{value:"Defined in",id:"defined-in-129",level:4},{value:"PRE_ENTITY_SPAWN_FILTER",id:"pre_entity_spawn_filter",level:3},{value:"Defined in",id:"defined-in-130",level:4},{value:"PRE_FAMILIAR_COLLISION_FILTER",id:"pre_familiar_collision_filter",level:3},{value:"Defined in",id:"defined-in-131",level:4},{value:"PRE_GET_PEDESTAL",id:"pre_get_pedestal",level:3},{value:"Defined in",id:"defined-in-132",level:4},{value:"PRE_ITEM_PICKUP",id:"pre_item_pickup",level:3},{value:"Defined in",id:"defined-in-133",level:4},{value:"PRE_KNIFE_COLLISION_FILTER",id:"pre_knife_collision_filter",level:3},{value:"Defined in",id:"defined-in-134",level:4},{value:"PRE_NEW_LEVEL",id:"pre_new_level",level:3},{value:"Defined in",id:"defined-in-135",level:4},{value:"PRE_NPC_COLLISION_FILTER",id:"pre_npc_collision_filter",level:3},{value:"Defined in",id:"defined-in-136",level:4},{value:"PRE_NPC_UPDATE_FILTER",id:"pre_npc_update_filter",level:3},{value:"Defined in",id:"defined-in-137",level:4},{value:"PRE_PROJECTILE_COLLISION_FILTER",id:"pre_projectile_collision_filter",level:3},{value:"Defined in",id:"defined-in-138",level:4},{value:"PRE_ROOM_ENTITY_SPAWN_FILTER",id:"pre_room_entity_spawn_filter",level:3},{value:"Defined in",id:"defined-in-139",level:4},{value:"PRE_TEAR_COLLISION_FILTER",id:"pre_tear_collision_filter",level:3},{value:"Defined in",id:"defined-in-140",level:4}];function o(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"modcallbackcustom",children:"ModCallbackCustom"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The Isaac API offers a lot of callbacks, but a lot of times there isn't one for the specific\nthing that you are looking to do. So, ",(0,t.jsx)(i.code,{children:"isaacscript-common"})," adds a bunch of new callbacks that\nyou can use."]}),"\n",(0,t.jsx)(i.li,{children:"The extra callbacks are efficient such that no code is executed until there is one or more\nsubscriptions."}),"\n",(0,t.jsxs)(i.li,{children:["You must upgrade your mod with the ",(0,t.jsx)(i.code,{children:"upgradeMod"})," helper function before using a custom callback."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"enumeration-members",children:"Enumeration Members"}),"\n",(0,t.jsx)(i.h3,{id:"entity_take_dmg_filter",children:"ENTITY_TAKE_DMG_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"ENTITY_TAKE_DMG_FILTER"})," = ",(0,t.jsx)(i.code,{children:"0"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function entityTakeDmgFilter(\n  entity: Entity,\n  amount: float,\n  damageFlags: BitFlags<DamageFlag>,\n  source: EntityRef,\n  countdownFrames: int,\n): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L32",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:32"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"entity_take_dmg_player",children:"ENTITY_TAKE_DMG_PLAYER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"ENTITY_TAKE_DMG_PLAYER"})," = ",(0,t.jsx)(i.code,{children:"1"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback, except this callback\nautomatically filters for ",(0,t.jsx)(i.code,{children:"EntityType.ENTITY_PLAYER"})," and casts the ",(0,t.jsx)(i.code,{children:"Entity"})," object to a\n",(0,t.jsx)(i.code,{children:"EntityPlayer"}),"."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function entityTakeDmgPlayer(\n  player: EntityPlayer,\n  amount: float,\n  damageFlags: BitFlags<DamageFlag>,\n  source: EntityRef,\n  countdownFrames: int,\n): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L54",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:54"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"input_action_filter",children:"INPUT_ACTION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"INPUT_ACTION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"2"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"INPUT_ACTION"})," callback, except this callback allows you to\nspecify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"InputHook"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ButtonAction"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function inputActionFilter(\n  entity: Entity | undefined,\n  inputHook: InputHook,\n  buttonAction: ButtonAction,\n): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L74",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:74"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"input_action_player",children:"INPUT_ACTION_PLAYER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"INPUT_ACTION_PLAYER"})," = ",(0,t.jsx)(i.code,{children:"3"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"INPUT_ACTION"})," callback, except this callback automatically\nfilters for ",(0,t.jsx)(i.code,{children:"EntityType.ENTITY_PLAYER"})," and casts the ",(0,t.jsx)(i.code,{children:"Entity"})," object to a ",(0,t.jsx)(i.code,{children:"EntityPlayer"}),". It\nalso allows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fifth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"InputHook"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional sixth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ButtonAction"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function inputActionPlayer(\n  player: EntityPlayer,\n  inputHook: InputHook,\n  buttonAction: ButtonAction,\n): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L98",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:98"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_ambush_finished",children:"POST_AMBUSH_FINISHED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_AMBUSH_FINISHED"})," = ",(0,t.jsx)(i.code,{children:"4"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when a Challenge Room or Boss Rush is started.\nSpecifically, this happens on the first frame that ",(0,t.jsx)(i.code,{children:"Room.IsAmbushDone"})," is true."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"AmbushType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postAmbushFinished(ambushType: AmbushType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L112",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:112"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_ambush_started",children:"POST_AMBUSH_STARTED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_AMBUSH_STARTED"})," = ",(0,t.jsx)(i.code,{children:"5"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when a Challenge Room or Boss Rush is completed.\nSpecifically, this happens on the first frame that ",(0,t.jsx)(i.code,{children:"Room.IsAmbushActive"})," is true."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"AmbushType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postAmbushStarted(ambushType: AmbushType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L126",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:126"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bomb_exploded",children:"POST_BOMB_EXPLODED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BOMB_EXPLODED"})," = ",(0,t.jsx)(i.code,{children:"6"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the ",(0,t.jsx)(i.code,{children:"POST_BOMB_UPDATE"})," callback that it explodes."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBombDetonated(bomb: EntityBomb): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L141",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:141"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bomb_init_filter",children:"POST_BOMB_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BOMB_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"7"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_BOMB_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBombInitFilter(bomb: EntityBomb): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L157",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:157"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bomb_init_late",children:"POST_BOMB_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BOMB_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"8"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_BOMB_UPDATE"})," frame for each bomb."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_BOMB_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBombInitLate(bomb: EntityBomb): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L175",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:175"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bomb_render_filter",children:"POST_BOMB_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BOMB_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"9"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_BOMB_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBombRenderFilter(bomb: EntityBomb, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L191",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:191"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bomb_update_filter",children:"POST_BOMB_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BOMB_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"10"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_BOMB_UPDATE"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBombUpdateFilter(bomb: EntityBomb): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L207",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:207"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_bone_swing",children:"POST_BONE_SWING"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_BONE_SWING"})," = ",(0,t.jsx)(i.code,{children:"11"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback when one of Forgotten's bone clubs is swung or thrown."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postBoneSwing(boneClub: EntityKnife): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L216",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:216"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_collectible_empty",children:"POST_COLLECTIBLE_EMPTY"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_COLLECTIBLE_EMPTY"})," = ",(0,t.jsx)(i.code,{children:"12"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PICKUP_UPDATE"})," callback when a collectible goes from a non-zero sub-type\nto ",(0,t.jsx)(i.code,{children:"CollectibleType.NULL"}),' (i.e. an "empty" pedestal).']}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if the\npedestal changed from the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postCollectibleEmpty(\n  collectible: EntityPickupCollectible,\n  oldCollectibleType: CollectibleType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L233",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:233"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_cursed_teleport",children:"POST_CURSED_TELEPORT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_CURSED_TELEPORT"})," = ",(0,t.jsx)(i.code,{children:"13"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PLAYER_RENDER"}),' callback on the first frame that the "TeleportUp" animation\nbegins playing after a player triggers a Cursed Eye teleport or a Cursed Skull teleport. (Both\nof these have the same effect in causing Isaac to be teleported to a random room.)']}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postCursedTeleport(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L250",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:250"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_custom_revive",children:"POST_CUSTOM_REVIVE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_CUSTOM_REVIVE"})," = ",(0,t.jsx)(i.code,{children:"14"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PLAYER_UPDATE"})," callback after the player has finished the death animation,\nhas teleported to the previous room, and is ready to play the animation for the modded revival\nitem. The ",(0,t.jsx)(i.code,{children:"revivalType"})," will match the value returned from the ",(0,t.jsx)(i.code,{children:"PRE_CUSTOM_REVIVE"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["In this callback, you must play an animation with something along the lines of\n",(0,t.jsx)(i.code,{children:"player.AnimateCollectible(CollectibleTypeCustom.COLLECTIBLE_MY_REVIVAL_ITEM);"}),", otherwise the\nanimation for a 1-Up will play."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if the\nrevival type matches the one provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postCustomRevive(player: EntityPlayer, revivalType: int): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L269",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:269"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_dice_room_activated",children:"POST_DICE_ROOM_ACTIVATED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_DICE_ROOM_ACTIVATED"})," = ",(0,t.jsx)(i.code,{children:"15"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"EFFECT_POST_UPDATE"})," callback after a player has entered the range of a Dice\nRoom floor."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"DiceFloorSubType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postDiceRoomActivated(\n  player: EntityPlayer,\n  diceFloorSubType: DiceFloorSubType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L286",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:286"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_door_render",children:"POST_DOOR_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_DOOR_RENDER"})," = ",(0,t.jsx)(i.code,{children:"16"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a door exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postDoorRender(door: GridEntityDoor): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L299",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:299"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_door_update",children:"POST_DOOR_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_DOOR_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"17"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a door exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postDoorUpdate(door: GridEntityDoor): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L312",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:312"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_effect_init_filter",children:"POST_EFFECT_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_EFFECT_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"18"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_EFFECT_INIT"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EffectVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEffectInitFilter(effect: EntityEffect): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L328",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:328"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_effect_init_late",children:"POST_EFFECT_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_EFFECT_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"19"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_EFFECT_UPDATE"})," frame for each effect."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_EFFECT_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EffectVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEffectInitLate(effect: EntityEffect): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L346",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:346"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_effect_render_filter",children:"POST_EFFECT_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_EFFECT_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"20"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_EFFECT_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EffectVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEffectRenderFilter(effect: EntityEffect, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L362",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:362"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_effect_state_changed",children:"POST_EFFECT_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_EFFECT_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"21"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_EFFECT_UPDATE"}),' callback when an effect\'s state has changed from what it\nwas on the previous frame. (In this context, "state" refers to the ',(0,t.jsx)(i.code,{children:"EntityEffect.State"})," field.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EffectVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEffectStateChanged(\n  effect: EntityEffect,\n  previousState: int,\n  currentState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L382",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:382"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_effect_update_filter",children:"POST_EFFECT_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_EFFECT_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"22"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_EFFECT_UPDATE"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EffectVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEffectUpdateFilter(effect: EntityEffect): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L398",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:398"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_entity_kill_filter",children:"POST_ENTITY_KILL_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ENTITY_KILL_FILTER"})," = ",(0,t.jsx)(i.code,{children:"23"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_ENTITY_KILL"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEntityKillFilter(entity: Entity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L416",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:416"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_esau_jr",children:"POST_ESAU_JR"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ESAU_JR"})," = ",(0,t.jsx)(i.code,{children:"24"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires one ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," frame after the player has used the Esau Jr. item. (The player is not\nupdated to the new character until a game frame has passed.)"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postEsauJr(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L426",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:426"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_familiar_init_filter",children:"POST_FAMILIAR_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FAMILIAR_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"25"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_FAMILIAR_INIT"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFamiliarInitFilter(familiar: EntityFamiliar): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L442",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:442"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_familiar_init_late",children:"POST_FAMILIAR_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FAMILIAR_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"26"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"FAMILIAR_UPDATE"})," frame for each familiar."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_TEAR_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFamiliarInitLate(familiar: EntityFamiliar): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L460",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:460"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_familiar_render_filter",children:"POST_FAMILIAR_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FAMILIAR_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"27"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_FAMILIAR_RENDER"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFamiliarRenderFilter(familiar: EntityFamiliar, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L476",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:476"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_familiar_state_changed",children:"POST_FAMILIAR_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FAMILIAR_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"28"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_FAMILIAR_UPDATE"}),' callback when a familiar\'s state has changed from what it\nwas on the previous frame. (In this context, "state" refers to the ',(0,t.jsx)(i.code,{children:"EntityFamiliar.State"}),"\nfield.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFamiliarStateChanged(\n  familiar: EntityFamiliar,\n  previousState: int,\n  currentState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L497",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:497"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_familiar_update_filter",children:"POST_FAMILIAR_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FAMILIAR_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"29"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_FAMILIAR_UPDATE"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFamiliarUpdateFilter(familiar: EntityFamiliar): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L513",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:513"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_first_esau_jr",children:"POST_FIRST_ESAU_JR"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FIRST_ESAU_JR"})," = ",(0,t.jsx)(i.code,{children:"30"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires one ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," frame after the player has first used the Esau Jr. item. (The player is\nnot updated to the new character until a game frame has passed.)"]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful because there is no way to get access to the Esau Jr. character entity\nbefore the player has actually used the Esau Jr. item."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFirstEsauJr(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L526",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:526"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_first_flip",children:"POST_FIRST_FLIP"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FIRST_FLIP"})," = ",(0,t.jsx)(i.code,{children:"31"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires after the player has used the Flip item for the first time. Unlike the vanilla ",(0,t.jsx)(i.code,{children:"USE_ITEM"}),"\ncallback, this callback will return the player object for the new Lazarus (not the one who used\nthe Flip item)."]}),"\n",(0,t.jsx)(i.p,{children:'This callback is useful because there is no way to get access to the "flipped" character entity\nbefore the player has actually used the Flip item.'}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFirstFlip(newLazarus: EntityPlayer, oldLazarus: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L540",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:540"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_flip",children:"POST_FLIP"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_FLIP"})," = ",(0,t.jsx)(i.code,{children:"32"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires after the player has used the Flip item. Unlike the vanilla ",(0,t.jsx)(i.code,{children:"USE_ITEM"})," callback, this\ncallback will return the player object for the new Lazarus (not the one who used the Flip\nitem)."]}),"\n",(0,t.jsx)(i.p,{children:'This callback is useful because there is no way to get access to the "flipped" character entity\nbefore the player has actually used the Flip item.'}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postFlip(newLazarus: EntityPlayer, oldLazarus: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L554",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:554"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_game_end_filter",children:"POST_GAME_END_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GAME_END_FILTER"})," = ",(0,t.jsx)(i.code,{children:"33"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_GAME_END"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"isGameOver"})," value provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGameEndFilter(isGameOver: boolean): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L568",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:568"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_game_started_reordered",children:"POST_GAME_STARTED_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GAME_STARTED_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"34"})]}),"\n",(0,t.jsxs)(i.p,{children:["Similar to the vanilla callback of the same name, but fires in the correct order with respect\nto the ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL"})," and the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"})," callbacks:"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You must provide a third argument:\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Pass true if you want the callback to only fire if the run is continued."}),"\n",(0,t.jsx)(i.li,{children:"Pass false if you want the callback to only fire when the run is not continued."}),"\n",(0,t.jsx)(i.li,{children:"Pass undefined if you want the callback to fire in both situations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"(The third argument for this callback is mandatory in order to prevent users from shooting\nthemselves in the foot with respect to logic unexpectedly being executed on continued runs.)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGameStartedReordered(isContinued: boolean): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L588",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:588"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_game_started_reordered_last",children:"POST_GAME_STARTED_REORDERED_LAST"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GAME_STARTED_REORDERED_LAST"})," = ",(0,t.jsx)(i.code,{children:"35"})]}),"\n",(0,t.jsxs)(i.p,{children:["Similar to the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," callback, but fires after all of the subscribed\ncallbacks have finished firing. Thus, you can use this callback to do perform things after a\nnew run has started (or continued), but you can be sure that all new-run-related initialization\nhas been completed."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You must provide a third argument:\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Pass true if you want the callback to only fire if the run is continued."}),"\n",(0,t.jsx)(i.li,{children:"Pass false if you want the callback to only fire when the run is not continued."}),"\n",(0,t.jsx)(i.li,{children:"Pass undefined if you want the callback to fire in both situations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"(The third argument for this callback is mandatory in order to prevent users from shooting\nthemselves in the foot with respect to logic unexpectedly being executed on continued runs.)"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGameStartedReorderedLast(isContinued: boolean): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L608",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:608"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_greed_mode_wave",children:"POST_GREED_MODE_WAVE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GREED_MODE_WAVE"})," = ",(0,t.jsx)(i.code,{children:"36"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when the Greed Mode wave increases."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGreedModeWave(oldWave: int, newWave: int): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L617",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:617"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_broken",children:"POST_GRID_ENTITY_BROKEN"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_BROKEN"})," = ",(0,t.jsx)(i.code,{children:"37"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when a grid entity changes to a state that corresponds to\nthe broken state for the respective grid entity type. (For example, this will fire for a\n",(0,t.jsx)(i.code,{children:"GridEntityType.ROCK"})," (2) when its state changes to ",(0,t.jsx)(i.code,{children:"RockState.BROKEN"})," (2).)"]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_BROKEN"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityBroken(gridEntity: GridEntity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L637",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:637"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_collision",children:"POST_GRID_ENTITY_COLLISION"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_COLLISION"})," = ",(0,t.jsx)(i.code,{children:"38"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when a new entity collides with a grid entity. (After\nthis, the callback will not continue to fire. It will only fire again once the entity moves out\nof range and then moves back into range.)"]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_COLLISION"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided (for the grid entity)."}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fifth argument that will make the callback only fire if the\ncolliding entity matches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional sixth argument that will make the callback only fire if the\ncolliding entity matches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional seventh argument that will make the callback only fire if the\ncolliding entity matches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCollision(\n  gridEntity: GridEntity,\n  entity: Entity,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L666",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:666"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_broken",children:"POST_GRID_ENTITY_CUSTOM_BROKEN"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_BROKEN"})," = ",(0,t.jsx)(i.code,{children:"39"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_BROKEN"})," callback, but only fires for grid entities created\nwith the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomBroken(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L684",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:684"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_collision",children:"POST_GRID_ENTITY_CUSTOM_COLLISION"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_COLLISION"})," = ",(0,t.jsx)(i.code,{children:"40"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_COLLISION"})," callback, but only fires for grid entities created\nwith the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if the\ncolliding entity matches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if the\ncolliding entity matches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional sixth argument that will make the callback only fire if the\ncolliding entity matches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomCollision(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n  entity: Entity,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L709",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:709"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_init",children:"POST_GRID_ENTITY_CUSTOM_INIT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_INIT"})," = ",(0,t.jsx)(i.code,{children:"41"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_INIT"})," callback, but only fires for grid entities created with\nthe ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomInit(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L727",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:727"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_remove",children:"POST_GRID_ENTITY_CUSTOM_REMOVE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_REMOVE"})," = ",(0,t.jsx)(i.code,{children:"42"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_REMOVE"})," callback, but only fires for grid entities created\nwith the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomRemove(\n  gridIndex: int,\n  gridEntityTypeCustom: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L745",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:745"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_render",children:"POST_GRID_ENTITY_CUSTOM_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_RENDER"})," = ",(0,t.jsx)(i.code,{children:"43"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_RENDER"})," callback, but only fires for grid entities created\nwith the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomRender(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L763",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:763"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_state_changed",children:"POST_GRID_ENTITY_CUSTOM_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"44"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_STATE_CHANGED"})," callback, but only fires for grid entities\ncreated with the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomStateChanged(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n  oldState: int,\n  newState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L783",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:783"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_custom_update",children:"POST_GRID_ENTITY_CUSTOM_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_CUSTOM_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"45"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_UPDATE"})," callback, but only fires for grid entities created\nwith the ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"})," helper function."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the custom ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided. (Custom grid entities do not have variants, so\nthere is no need for an optional argument to filter by variant.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityCustomUpdate(\n  gridEntity: GridEntity,\n  gridEntityTypeCustom: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L801",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:801"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_init",children:"POST_GRID_ENTITY_INIT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_INIT"})," = ",(0,t.jsx)(i.code,{children:"46"})]}),"\n",(0,t.jsx)(i.p,{children:"Fires when a new grid entity is initialized. Specifically, this is either:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["in the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})," callback (firing every time a room is entered, even if the\nentity was previously there on a previous room entry)"]}),"\n",(0,t.jsxs)(i.li,{children:["in the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback (if the entity appeared mid-way through the room, like when the\ntrapdoor appears after defeating It Lives)"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the ",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_INIT"}),"\ncallback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityInit(gridEntity: GridEntity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L824",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:824"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_remove",children:"POST_GRID_ENTITY_REMOVE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_REMOVE"})," = ",(0,t.jsx)(i.code,{children:"47"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when a new grid entity is removed. Specifically, this on\nthe frame after it no longer exists (where it did exist a frame ago)."]}),"\n",(0,t.jsx)(i.p,{children:'(Leaving a room with a grid entity does not count as "removing" it.)'}),"\n",(0,t.jsx)(i.p,{children:"This will fire when a Polty/Kineti picks up a grid entity."}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_REMOVE"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityRemove(\n  gridIndex: int,\n  gridEntityType: GridEntityType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L850",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:850"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_render",children:"POST_GRID_ENTITY_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_RENDER"})," = ",(0,t.jsx)(i.code,{children:"48"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a grid entity exists."]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_RENDER"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityRender(gridEntity: GridEntity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L868",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:868"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_state_changed",children:"POST_GRID_ENTITY_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"49"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"}),' callback when a grid entity changes its state. (In this context,\n"state" refers to the ',(0,t.jsx)(i.code,{children:"GridEntity.State"})," field.)"]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_STATE_CHANGED"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityStateChanged(\n  gridEntity: GridEntity,\n  oldState: int,\n  newState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-49",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L891",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:891"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_grid_entity_update",children:"POST_GRID_ENTITY_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_GRID_ENTITY_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"50"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a grid entity exists."]}),"\n",(0,t.jsxs)(i.p,{children:["For grid entities created with ",(0,t.jsx)(i.code,{children:"spawnCustomGridEntity"}),", use the\n",(0,t.jsx)(i.code,{children:"POST_GRID_ENTITY_CUSTOM_UPDATE"})," callback instead."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postGridEntityUpdate(gridEntity: GridEntity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-50",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L909",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:909"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_holy_mantle_removed",children:"POST_HOLY_MANTLE_REMOVED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_HOLY_MANTLE_REMOVED"})," = ",(0,t.jsx)(i.code,{children:"51"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when the player loses a Holy Mantle\ntemporary collectible effect."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because you might want to have code that happens when the player is hit\nfrom an enemy. Normally, you would accomplish this via the ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback, but that\ncallback never fires if the player has a Holy Mantle shield."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerInitReordered(\n  player: EntityPlayer,\n  oldNumHolyMantles: int,\n  newNumHolyMantles: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-51",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L933",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:933"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_item_discharge",children:"POST_ITEM_DISCHARGE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ITEM_DISCHARGE"})," = ",(0,t.jsx)(i.code,{children:"52"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when the player loses charge on their\nactive collectible item, implying that the item was just used."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because the ",(0,t.jsx)(i.code,{children:"USE_ITEM"})," callback does not fire when The Candle, Red\nCandle, and Bob's Rotten Brain are discharged."]}),"\n",(0,t.jsx)(i.p,{children:"Note that this callback will not fire if the active item is both discharged and swapped for\nanother item / discharged on the same frame, like in the case of Alabaster Box."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postItemDischarge(\n  player: EntityPlayer,\n  collectibleType: CollectibleType,\n  activeSlot: ActiveSlot,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-52",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L957",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:957"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_item_pickup",children:"POST_ITEM_PICKUP"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ITEM_PICKUP"})," = ",(0,t.jsx)(i.code,{children:"53"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when an item is no longer queued (i.e.\nwhen the animation of the player holding the item above their head is finished and the item is\nactually added to the player's inventory)."]}),"\n",(0,t.jsx)(i.p,{children:"Note that this callback will only fire once per Forgotten/Soul pair."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ItemType"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if the\nsub-type matches the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," or the ",(0,t.jsx)(i.code,{children:"TrinketType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postItemPickup(\n  player: EntityPlayer,\n  pickingUpItem: PickingUpItem,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-53",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L979",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:979"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_keyboard_changed",children:"POST_KEYBOARD_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_KEYBOARD_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"54"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_RENDER"}),' frame after a key on the keyboard has been pressed or\nreleased. (In other words, the callback only fires when the "pressed" status is different than\nwhat it was on the previous frame.)']}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"Keyboard"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the pressed state provided. (",(0,t.jsx)(i.code,{children:"true"})," for pressed, ",(0,t.jsx)(i.code,{children:"false"})," for released.)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postKeyboardChanged(keyboard: Keyboard, pressed: boolean): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-54",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L996",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:996"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_knife_init_filter",children:"POST_KNIFE_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_KNIFE_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"55"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_KNIFE_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"KnifeVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postKnifeInitFilter(knife: EntityKnife): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-55",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1012",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1012"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_knife_init_late",children:"POST_KNIFE_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_KNIFE_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"56"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_KNIFE_UPDATE"})," frame for each knife."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_KNIFE_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"KnifeVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postKnifeInitLate(knife: EntityKnife): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-56",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1030",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1030"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_knife_render_filter",children:"POST_KNIFE_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_KNIFE_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"57"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_KNIFE_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"KnifeVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postKnifeRenderFilter(knife: EntityKnife, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-57",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1046",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1046"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_knife_update_filter",children:"POST_KNIFE_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_KNIFE_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"58"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_KNIFE_UPDATE"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"KnifeVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postKnifeUpdateFilter(knife: EntityKnife): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-58",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1062",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1062"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_laser_init_filter",children:"POST_LASER_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_LASER_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"59"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_LASER_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"LaserVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postLaserInitFilter(laser: EntityLaser): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-59",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1078",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1078"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_laser_init_late",children:"POST_LASER_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_LASER_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"60"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_LASER_UPDATE"})," frame for each laser."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_LASER_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"LaserVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional forth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postLaserInitLate(laser: EntityLaser): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-60",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1096",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1096"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_laser_render_filter",children:"POST_LASER_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_LASER_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"61"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_LASER_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"LaserVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postLaserRenderFilter(laser: EntityLaser, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-61",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1112",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1112"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_laser_update_filter",children:"POST_LASER_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_LASER_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"62"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_LASER_UPDATE"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"LaserVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postLaserUpdateFilter(laser: EntityLaser): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-62",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1128",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1128"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_new_level_reordered",children:"POST_NEW_LEVEL_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NEW_LEVEL_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"63"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the vanilla callback of the same name, but fires in the correct order with respect\nto the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"})," and the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"})," callbacks:"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})]}),"\n",(0,t.jsxs)(i.p,{children:["Additionally, this callback will pass the ",(0,t.jsx)(i.code,{children:"LevelStage"})," as the first callback argument and the\n",(0,t.jsx)(i.code,{children:"StageType"})," as the second callback argument."]}),"\n",(0,t.jsxs)(i.p,{children:["Note that similar to the vanilla ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL"})," callback, this callback will not fire when a\nplayer resumes a saved run. (In that case, only the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," and the\n",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})," callbacks will fire, in that order)."]}),"\n",(0,t.jsxs)(i.p,{children:["If some specific cases, mods can change the current level during run initialization (on the 0th\nframe). However, due to how the callback reordering works, the custom\n",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL_REORDERED"})," callback will never fire on the 0th frame. To get around this, call\nthe ",(0,t.jsx)(i.code,{children:"forceNewLevelCallback()"})," function before changing levels to temporarily force the callback\nto fire."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"LevelStage"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"StageType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNewLevelReordered(stage: LevelStage, stageType: StageType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-63",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1159",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1159"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_new_room_early",children:"POST_NEW_ROOM_EARLY"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NEW_ROOM_EARLY"})," = ",(0,t.jsx)(i.code,{children:"64"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"})," or ",(0,t.jsx)(i.code,{children:"PRE_ENTITY_SPAWN"})," callback where being in a new room is\ndetected. This is useful because the vanilla ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"})," callback fires only after entities\nin the room have been initialized and updated once, which means that it is possible for\nentity-related code to run before room-related-initialization has been performed."]}),"\n",(0,t.jsxs)(i.p,{children:["Additionally, this callback will pass the ",(0,t.jsx)(i.code,{children:"RoomType"})," as the first callback argument."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"RoomType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNewRoomEarly(roomType: RoomType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-64",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1177",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1177"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_new_room_reordered",children:"POST_NEW_ROOM_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NEW_ROOM_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"65"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same as the vanilla callback of the same name, but fires in the correct order with respect\nto the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"})," and the ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL"})," callbacks:"]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_LEVEL_REORDERED"})," --\x3e ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})]}),"\n",(0,t.jsxs)(i.p,{children:["Additionally, this callback will pass the ",(0,t.jsx)(i.code,{children:"RoomType"})," as the first callback argument."]}),"\n",(0,t.jsxs)(i.p,{children:["If some specific cases, mods can change the current room during run initialization (on the 0th\nframe). However, due to how the callback reordering works, the custom ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"}),"\ncallback will never fire on the 0th frame. To get around this, call the\n",(0,t.jsx)(i.code,{children:"forceNewRoomCallback()"})," function before changing levels to temporarily force the callback to\nfire."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"RoomType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNewRoomReordered(roomType: RoomType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-65",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1201",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1201"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_death_filter",children:"POST_NPC_DEATH_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_DEATH_FILTER"})," = ",(0,t.jsx)(i.code,{children:"66"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_NPC_DEATH"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCDeathFilter(npc: EntityNPC): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-66",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1219",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1219"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_init_filter",children:"POST_NPC_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"67"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_NPC_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCInitFilter(npc: EntityNPC): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-67",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1237",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1237"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_init_late",children:"POST_NPC_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"68"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"NPC_UPDATE"})," frame for each NPC."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_NPC_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCInitLate(npc: EntityNPC): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-68",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1257",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1257"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_render_filter",children:"POST_NPC_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"69"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_NPC_RENDER"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCRenderFilter(npc: EntityNPC, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-69",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1275",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1275"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_state_changed",children:"POST_NPC_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"70"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_NPC_UPDATE"}),' callback when an NPC\'s state has changed from what it was on\nthe previous frame. (In this context, "state" refers to the ',(0,t.jsx)(i.code,{children:"EntityNPC.State"})," field.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCStateChanged(\n  npc: EntityNPC,\n  previousState: int,\n  currentState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-70",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1297",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1297"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_npc_update_filter",children:"POST_NPC_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_NPC_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"71"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_NPC_UPDATE"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postNPCUpdateFilter(npc: EntityNPC): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-71",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1315",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1315"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_peffect_update_reordered",children:"POST_PEFFECT_UPDATE_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PEFFECT_UPDATE_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"72"})]}),"\n",(0,t.jsxs)(i.p,{children:["Similar to the vanilla callback of the same name, but fires after the\n",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," callback fires (if the player is being updated on the 0th game\nframe of the run)."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful for two reasons:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Normally, ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE"})," fires before ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"}),". Since mod variables are\noften initialized at the beginning of the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"})," callback, this can cause\nproblems."]}),"\n",(0,t.jsxs)(i.li,{children:["Some functions do not work (or crash the game) when called before the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"}),"\ncallback. For example, since the level is not generated yet, you will not be able to access\nany rooms."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPEffectUpdateReordered(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-72",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1341",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1341"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_changed",children:"POST_PICKUP_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"73"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PICKUP_UPDATE"})," callback when a pickup has a different variant or sub-type\nthan what it was on the previous frame."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if the new\npickup matches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if the new\npickup matches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupChanged(\n  pickup: EntityPickup,\n  oldVariant: PickupVariant,\n  oldSubType: int,\n  newVariant: PickupVariant,\n  newSubType: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-73",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1363",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1363"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_collect",children:"POST_PICKUP_COLLECT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_COLLECT"})," = ",(0,t.jsx)(i.code,{children:"74"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_RENDER"}),' frame that a pickup plays the "Collect" animation.']}),"\n",(0,t.jsx)(i.p,{children:"Use this callback to know when a pickup is added to the player's inventory or health."}),"\n",(0,t.jsxs)(i.p,{children:["Note that this will not fire when the player takes a collectible; use either the\n",(0,t.jsx)(i.code,{children:"POST_PLAYER_COLLECTIBLE_ADDED"})," or the ",(0,t.jsx)(i.code,{children:"PRE_ITEM_PICKUP"})," callback for that."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupCollect(pickup: EntityPickup, player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-74",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1383",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1383"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_init_filter",children:"POST_PICKUP_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"75"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PICKUP_INIT"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupInitFilter(pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-75",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1399",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1399"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_init_first",children:"POST_PICKUP_INIT_FIRST"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_INIT_FIRST"})," = ",(0,t.jsx)(i.code,{children:"76"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PICKUP_INIT"})," callback on the first time that a player has seen the\nrespective pickup on the run."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful because pickups will despawn upon leaving the room and respawn upon\nre-entering the room."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupInitFirst(pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-76",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1418",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1418"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_init_late",children:"POST_PICKUP_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"77"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_PICKUP_UPDATE"})," frame for each pickup."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_PICKUP_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupInitLate(pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-77",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1436",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1436"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_render_filter",children:"POST_PICKUP_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"78"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PICKUP_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupRenderFilter(pickup: EntityPickup, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-78",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1452",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1452"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_selection_filter",children:"POST_PICKUP_SELECTION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_SELECTION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"79"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PICKUP_SELECTION"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupSelectionFilter(\n  pickup: EntityPickup,\n  variant: PickupVariant,\n  subType: int,\n): [pickupVariant: PickupVariant, subType: int] | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-79",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1472",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1472"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_state_changed",children:"POST_PICKUP_STATE_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_STATE_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"80"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PICKUP_UPDATE"}),' callback when a pickup\'s state has changed from what it was\non the previous frame. (In this context, "state" refers to the ',(0,t.jsx)(i.code,{children:"EntityPickup.State"})," field.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupStateChanged(\n  pickup: EntityPickup,\n  previousState: int,\n  currentState: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-80",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1492",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1492"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pickup_update_filter",children:"POST_PICKUP_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PICKUP_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"81"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PICKUP_UPDATE"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPickupUpdateFilter(pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-81",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1508",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1508"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pit_render",children:"POST_PIT_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PIT_RENDER"})," = ",(0,t.jsx)(i.code,{children:"82"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a pit exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPitRender(pit: GridEntityPit): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-82",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1521",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1521"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pit_update",children:"POST_PIT_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PIT_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"83"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a pit exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPitUpdate(pit: GridEntityPit): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-83",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1534",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1534"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_change_health",children:"POST_PLAYER_CHANGE_HEALTH"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_CHANGE_HEALTH"})," = ",(0,t.jsx)(i.code,{children:"84"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player's health (i.e. hearts) is\ndifferent than what it was on the previous frame. For more information, see the ",(0,t.jsx)(i.code,{children:"PlayerHealth"}),"\nenum."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerChangeHealth(\n  player: EntityPlayer,\n  healthType: HealthType,\n  difference: int,\n  oldValue: int,\n  newValue: int,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-84",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1557",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1557"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_change_stat",children:"POST_PLAYER_CHANGE_STAT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_CHANGE_STAT"})," = ",(0,t.jsx)(i.code,{children:"85"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when one of the player's stats change\nfrom what they were on the previous frame."]}),"\n",(0,t.jsxs)(i.p,{children:["The type of ",(0,t.jsx)(i.code,{children:"oldValue"})," and ",(0,t.jsx)(i.code,{children:"newValue"})," will depend on what kind of stat it is. For example,\n",(0,t.jsx)(i.code,{children:"StatType.FLYING"}),' will be a boolean. (You can use the "Types" helper functions to narrow the\ntype.)']}),"\n",(0,t.jsxs)(i.p,{children:["For ",(0,t.jsx)(i.code,{children:"StatType.TEAR_FLAG"}),", ",(0,t.jsx)(i.code,{children:"StatType.TEAR_COLOR"}),", ",(0,t.jsx)(i.code,{children:"StatType.FLYING"}),", and ",(0,t.jsx)(i.code,{children:"StatType.SIZE"}),", the\n",(0,t.jsx)(i.code,{children:"difference"})," argument will always be a value of 0, since the type of these stats are not\nnumbers. (For these cases, you should examine the ",(0,t.jsx)(i.code,{children:"oldValue"})," and ",(0,t.jsx)(i.code,{children:"newValue"})," arguments\naccordingly.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerChangeStat<T extends StatType>(\n  player: EntityPlayer,\n  statType: T,\n  difference: int,\n  oldValue: StatTypeType[T],\n  newValue: StatTypeType[T],\n) => void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-85",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1588",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1588"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_change_type",children:"POST_PLAYER_CHANGE_TYPE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_CHANGE_TYPE"})," = ",(0,t.jsx)(i.code,{children:"86"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player entity changes its player\ntype\n(i.e. character) from what it was on the previous frame. For example, it will fire after using\nClicker, after dying with the Judas' Shadow collectible, etc."]}),"\n",(0,t.jsxs)(i.p,{children:["Notably, it does not fire after the player uses the Flip item or the Esau Jr. item, because\nthose items cause separate player entities to be created. Use the ",(0,t.jsx)(i.code,{children:"POST_FLIP"})," and\n",(0,t.jsx)(i.code,{children:"POST_ESAU_JR"})," callbacks to handle those situations."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerChangeType(\n  player: EntityPlayer,\n  oldCharacter: PlayerType,\n  newCharacter: PlayerType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-86",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1612",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1612"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_collectible_added",children:"POST_PLAYER_COLLECTIBLE_ADDED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_COLLECTIBLE_ADDED"})," = ",(0,t.jsx)(i.code,{children:"87"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player's collectible count is\nhigher than what it was on the previous frame, or when the active items change, or when the\nbuild is rerolled."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if the\ncollectible matches the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerCollectibleAdded(\n  player: EntityPlayer,\n  collectibleType: CollectibleType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-87",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1630",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1630"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_collectible_removed",children:"POST_PLAYER_COLLECTIBLE_REMOVED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_COLLECTIBLE_REMOVED"})," = ",(0,t.jsx)(i.code,{children:"88"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player's collectible count is\nlower than what it was on the previous frame, or when the active items change, or when the\nbuild is rerolled."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if the\ncollectible matches the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerCollectibleRemoved(\n  player: EntityPlayer,\n  collectibleType: CollectibleType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-88",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1648",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1648"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_fatal_damage",children:"POST_PLAYER_FATAL_DAMAGE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_FATAL_DAMAGE"})," = ",(0,t.jsx)(i.code,{children:"89"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback when a player takes fatal damage. Return false to\nprevent the fatal damage."]}),"\n",(0,t.jsx)(i.p,{children:"Note that this function does properly take into account Guppy's Collar, Broken Ankh, Spirit\nShackles, and Mysterious Paper. It also takes into account using The Bible on Satan."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerFatalDamage(player: EntityPlayer): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-89",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1667",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1667"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_init_first",children:"POST_PLAYER_INIT_FIRST"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_INIT_FIRST"})," = ",(0,t.jsx)(i.code,{children:"90"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," frame for each player, similar to the\n",(0,t.jsx)(i.code,{children:"POST_PLAYER_INIT_LATE"})," callback, with two changes:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'This will not fire for "child" players (e.g. non-real players like the Strawman Keeper).'}),"\n",(0,t.jsx)(i.li,{children:"This will fire when the player enters a Genesis room and all of their items are taken away."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["You should use this callback for any player-related initialization logic, like giving the\ncharacter their starting items for the run. (You do not want to use the vanilla\n",(0,t.jsx)(i.code,{children:"POST_PLAYER_INIT"})," callback for this because it fires when a run is continued.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerInitFirst(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-90",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1690",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1690"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_init_late",children:"POST_PLAYER_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"91"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," frame for each player."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_PLAYER_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["For initializing a player with custom items and so forth, use the ",(0,t.jsx)(i.code,{children:"POST_PLAYER_INIT_FIRST"}),"\ncallback instead to handle the case of a Genesis room."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerInitLate(pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-91",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1711",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1711"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_render_reordered",children:"POST_PLAYER_RENDER_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_RENDER_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"92"})]}),"\n",(0,t.jsxs)(i.p,{children:["Similar to the vanilla callback of the same name, but fires after the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"}),"\ncallback fires (if the player is spawning on the 0th game frame of the run)."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful for two reasons:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Normally, ",(0,t.jsx)(i.code,{children:"POST_PLAYER_RENDER"})," fires before ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"}),". Since mod variables are\noften initialized at the beginning of the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"})," callback, this can cause\nproblems."]}),"\n",(0,t.jsxs)(i.li,{children:["Some functions do not work (or crash the game) when called before the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"}),"\ncallback. For example, since the level is not generated yet, you will not be able to access\nany rooms."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerRenderReordered(player: EntityPlayer, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-92",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1736",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1736"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_player_update_reordered",children:"POST_PLAYER_UPDATE_REORDERED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PLAYER_UPDATE_REORDERED"})," = ",(0,t.jsx)(i.code,{children:"93"})]}),"\n",(0,t.jsxs)(i.p,{children:["Similar to the vanilla callback of the same name, but fires after the\n",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED_REORDERED"})," callback fires (if the player is being updated on the 0th game\nframe of the run)."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful for two reasons:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["Normally, ",(0,t.jsx)(i.code,{children:"POST_PLAYER_UPDATE"})," fires before ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"}),". Since mod variables are\noften initialized at the beginning of the ",(0,t.jsx)(i.code,{children:"POST_GAME_STARTED"})," callback, this can cause\nproblems."]}),"\n",(0,t.jsxs)(i.li,{children:["Some functions do not work (or crash the game) when called before the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM"}),"\ncallback. For example, since the level is not generated yet, you will not be able to access\nany rooms."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPlayerUpdateReordered(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-93",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1762",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1762"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_poop_render",children:"POST_POOP_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_POOP_RENDER"})," = ",(0,t.jsx)(i.code,{children:"94"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a poop exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPoopRender(poop: GridEntityPoop): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-94",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1775",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1775"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_poop_update",children:"POST_POOP_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_POOP_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"95"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a poop exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPoopUpdate(poop: GridEntityPoop): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-95",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1788",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1788"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pressure_plate_render",children:"POST_PRESSURE_PLATE_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PRESSURE_PLATE_RENDER"})," = ",(0,t.jsx)(i.code,{children:"96"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a pressure plate exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPressurePlateRender(pressurePlate: GridEntityPressurePlate): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-96",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1801",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1801"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_pressure_plate_update",children:"POST_PRESSURE_PLATE_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PRESSURE_PLATE_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"97"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a pressure plate exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPressurePlateUpdate(pressurePlate: GridEntityPressurePlate): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-97",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1814",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1814"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_projectile_init_filter",children:"POST_PROJECTILE_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PROJECTILE_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"98"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PROJECTILE_INIT"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postProjectileInitFilter(projectile: EntityProjectile): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-98",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1830",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1830"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_projectile_init_late",children:"POST_PROJECTILE_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PROJECTILE_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"99"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_PROJECTILE_UPDATE"})," frame for each projectile."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_PROJECTILE_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if matches\nthe ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postProjectileInitLate(projectile: EntityProjectile): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-99",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1848",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1848"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_projectile_kill",children:"POST_PROJECTILE_KILL"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PROJECTILE_KILL"})," = ",(0,t.jsx)(i.code,{children:"100"})]}),"\n",(0,t.jsx)(i.p,{children:"Fires when the provided projectile is removed after colliding with an entity or grid entity."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postProjectileKill(projectile: EntityProjectile): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-100",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1863",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1863"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_projectile_render_filter",children:"POST_PROJECTILE_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PROJECTILE_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"101"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PROJECTILE_RENDER"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postProjectileRenderFilter(projectile: EntityProjectile, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-101",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1879",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1879"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_projectile_update_filter",children:"POST_PROJECTILE_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PROJECTILE_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"102"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_PROJECTILE_INIT"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postProjectileUpdateFilter(projectile: EntityProjectile): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-102",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1895",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1895"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_purchase",children:"POST_PURCHASE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_PURCHASE"})," = ",(0,t.jsx)(i.code,{children:"103"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player first picks up a new\nitem. The pickup returned in the callback is assumed to be the first pickup that no longer\nexists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PickupVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postPurchase(player: EntityPlayer, pickup: EntityPickup): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-103",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1912",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1912"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_rock_render",children:"POST_ROCK_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ROCK_RENDER"})," = ",(0,t.jsx)(i.code,{children:"104"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a rock exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postRockRender(rock: GridEntityRock): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-104",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1927",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1927"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_rock_update",children:"POST_ROCK_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ROCK_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"105"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a rock exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"GridEntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postRockUpdate(rock: GridEntityRock): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-105",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1942",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1942"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_room_clear_changed",children:"POST_ROOM_CLEAR_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_ROOM_CLEAR_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"106"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback when the clear state of a room changes (as according to\nthe ",(0,t.jsx)(i.code,{children:"Room.IsClear"})," method)."]}),"\n",(0,t.jsx)(i.p,{children:"For example, this callback fires when you defeat all the enemies in a room (clear --\x3e not\nclear) or when you bomb an angel statue (not clear --\x3e clear). This callback does not fire when\nyou travel between a cleared room and an uncleared room."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if the room\nclear state matches the boolean provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postRoomClearChanged(roomClear: boolean): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-106",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1960",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1960"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_sacrifice",children:"POST_SACRIFICE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SACRIFICE"})," = ",(0,t.jsx)(i.code,{children:"107"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback when a player takes damage from spikes in a Sacrifice\nRoom."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSacrifice(player: EntityPlayer, numSacrifices: int): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-107",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1976",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1976"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_animation_changed",children:"POST_SLOT_ANIMATION_CHANGED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_ANIMATION_CHANGED"})," = ",(0,t.jsx)(i.code,{children:"108"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback when a slot entity's animation changes."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotAnimationChanged(\n  slot: Entity,\n  previousAnimation: string,\n  currentAnimation: string,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-108",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L1995",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:1995"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_collision",children:"POST_SLOT_COLLISION"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_COLLISION"})," = ",(0,t.jsx)(i.code,{children:"109"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"PRE_PLAYER_COLLISION"})," callback when when a player collides with a slot entity.\n(It will not fire if any other type of entity collides with the slot entity.)"]}),"\n",(0,t.jsx)(i.p,{children:'When a player runs into a slot entity, this callback will continually fire, since the player is\ncolliding with it on every frame. Thus, you should only perform actions in this callback under\ncertain conditions, like if the slot entity is playing the "Idle" animation, and so on.'}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n",(0,t.jsxs)(i.li,{children:["(Only players will cause this callback to fire, so there is no need for an optional argument\nto filter by ",(0,t.jsx)(i.code,{children:"EntityType"}),".)"]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotCollision(\n  slot: EntitySlot,\n  entity: Entity,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-109",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2020",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2020"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_destroyed",children:"POST_SLOT_DESTROYED"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_DESTROYED"})," = ",(0,t.jsx)(i.code,{children:"110"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_SLOT_UPDATE"})," or the ",(0,t.jsx)(i.code,{children:"POST_ENTITY_REMOVE"})," callback when a slot machine is\ndestroyed or a beggar is removed."]}),"\n",(0,t.jsx)(i.p,{children:"This callback will fire in four different kinds of situations:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["When slot machine entities (e.g. ",(0,t.jsx)(i.code,{children:"SlotVariant.SLOT_MACHINE"})," and\n",(0,t.jsx)(i.code,{children:"SlotVariant.BLOOD_DONATION_MACHINE"}),") are destroyed with an explosion. When this happens,\nthey typically stay in the room and can be pushed around. This state is detected via a\nchange in the ",(0,t.jsx)(i.code,{children:"GridCollisionClass"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"When slot machine entities pay out with a collectible item. When this happens, they\nimmediately despawn without playing any special animation."}),"\n",(0,t.jsxs)(i.li,{children:["When beggar entities (e.g. ",(0,t.jsx)(i.code,{children:"SlotVariant.BEGGAR"})," and ",(0,t.jsx)(i.code,{children:"SlotVariant.SHELL_GAME"}),") are destroyed\nwith an explosion. When this happens, they immediately despawn without playing any special\nanimation."]}),"\n",(0,t.jsx)(i.li,{children:'When beggar entities pay out with a collectible item. When this happens, they despawn after\nplaying the "Teleport" animation. (This is not technically a "destruction" event, but the\ncallback will fire for this to remain consistent with the other types of slot entities.)'}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Depending on the specific types of slot removal that you need to detect, you can filter using:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.code,{children:"isSlotMachine"})," helper function to differentiate between slot machines and beggars."]}),"\n",(0,t.jsxs)(i.li,{children:["The passed callback argument of ",(0,t.jsx)(i.code,{children:"SlotDestructionType"})," to differentiate between bombed slots\nand slots that paid out with a collectible item."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Note that when a Crane Game explodes after paying out three collectibles, the\n",(0,t.jsx)(i.code,{children:"SlotDestructionType"})," will be equal to ",(0,t.jsx)(i.code,{children:"SlotDestructionType.NORMAL"})," instead of\n",(0,t.jsx)(i.code,{children:"SlotDestructionType.COLLECTIBLE_PAYOUT"})," like you might expect. (This is because it only\nexplodes after a short delay, and when doing so, it produces rewards in the same way that would\nhappen if you bombed it.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotDestroyed(slot: Entity, slotDestructionType: SlotDestructionType): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-110",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2063",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2063"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_init",children:"POST_SLOT_INIT"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_INIT"})," = ",(0,t.jsx)(i.code,{children:"111"})]}),"\n",(0,t.jsx)(i.p,{children:"Fires when a new slot entity is initialized. Specifically, this is either:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["in the ",(0,t.jsx)(i.code,{children:"POST_NEW_ROOM_REORDERED"})," callback (firing every time a room is entered, even if the\nentity was previously there on a previous room entry)"]}),"\n",(0,t.jsxs)(i.li,{children:["in the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback (if the entity appeared mid-way through the room, like when a\nWheel of Fortune card is used)"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotInit(slot: Entity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-111",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2083",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2083"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_render",children:"POST_SLOT_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_RENDER"})," = ",(0,t.jsx)(i.code,{children:"112"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a slot entity exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotRender(slot: Entity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-112",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2098",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2098"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_slot_update",children:"POST_SLOT_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SLOT_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"113"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a slot entity exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"SlotVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSlotUpdate(slot: Entity): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-113",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2113",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2113"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_spikes_render",children:"POST_SPIKES_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SPIKES_RENDER"})," = ",(0,t.jsx)(i.code,{children:"114"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that spikes exist."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSpikesRender(spikes: GridEntitySpikes): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-114",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2126",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2126"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_spikes_update",children:"POST_SPIKES_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_SPIKES_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"115"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that spikes exist."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postSpikesUpdate(spikes: GridEntitySpikes): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-115",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2139",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2139"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_init_filter",children:"POST_TEAR_INIT_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_INIT_FILTER"})," = ",(0,t.jsx)(i.code,{children:"116"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_TEAR_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearInitFilter(tear: EntityTear): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-116",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2155",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2155"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_init_late",children:"POST_TEAR_INIT_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_INIT_LATE"})," = ",(0,t.jsx)(i.code,{children:"117"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the first ",(0,t.jsx)(i.code,{children:"POST_TEAR_UPDATE"})," frame for each tear (which is when\n",(0,t.jsx)(i.code,{children:"EntityTear.FrameCount"})," is equal to 0)."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback is useful because many attributes cannot be set or retrieved properly in the\nnormal ",(0,t.jsx)(i.code,{children:"POST_TEAR_INIT"})," callback."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearInitLate(tear: EntityTear): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-117",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2174",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2174"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_init_very_late",children:"POST_TEAR_INIT_VERY_LATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_INIT_VERY_LATE"})," = ",(0,t.jsx)(i.code,{children:"118"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the second ",(0,t.jsx)(i.code,{children:"POST_TEAR_UPDATE"})," frame for each tear (which is when\n",(0,t.jsx)(i.code,{children:"EntityTear.FrameCount"})," is equal to 1)."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful because Incubus tears are not distinguishable until the second frame."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearInitVeryLate(tear: EntityTear): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-118",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2192",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2192"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_kill",children:"POST_TEAR_KILL"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_KILL"})," = ",(0,t.jsx)(i.code,{children:"119"})]}),"\n",(0,t.jsx)(i.p,{children:"Fires when the provided tear is removed after colliding with an entity or grid entity."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearKill(tear: EntityTear): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-119",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2207",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2207"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_render_filter",children:"POST_TEAR_RENDER_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_RENDER_FILTER"})," = ",(0,t.jsx)(i.code,{children:"120"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_TEAR_RENDER"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearRenderFilter(tear: EntityTear, renderOffset: Vector): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-120",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2223",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2223"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tear_update_filter",children:"POST_TEAR_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TEAR_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"121"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_TEAR_INIT"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTearUpdateFilter(tear: EntityTear): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-121",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2239",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2239"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tnt_render",children:"POST_TNT_RENDER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TNT_RENDER"})," = ",(0,t.jsx)(i.code,{children:"122"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," callback on every frame that a TNT exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTNTRender(tnt: GridEntityTNT): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-122",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2252",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2252"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_tnt_update",children:"POST_TNT_UPDATE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TNT_UPDATE"})," = ",(0,t.jsx)(i.code,{children:"123"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_UPDATE"})," callback on every frame that a TNT exists."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"You can provide an optional third argument that will make the callback only fire if it\nmatches the variant provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTNTUpdate(tnt: GridEntityTNT): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-123",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2265",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2265"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_transformation",children:"POST_TRANSFORMATION"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TRANSFORMATION"})," = ",(0,t.jsx)(i.code,{children:"124"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when a player gains or loses a new\ntransformation."]}),"\n",(0,t.jsx)(i.p,{children:"Note that this callback will only fire once per Forgotten/Soul pair."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerForm"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTransformation(\n  player: EntityPlayer,\n  playerForm: PlayerForm,\n  hasForm: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-124",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2285",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2285"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_trinket_break",children:"POST_TRINKET_BREAK"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_TRINKET_BREAK"})," = ",(0,t.jsx)(i.code,{children:"125"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from ",(0,t.jsx)(i.code,{children:"ENTITY_TAKE_DMG"})," callback when a Wishbone or a Walnut breaks."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TrinketType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postTrinketBreak(\n  player: EntityPlayer,\n  trinketType: TrinketType,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-125",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2301",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2301"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"post_use_pill_filter",children:"POST_USE_PILL_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"POST_USE_PILL_FILTER"})," = ",(0,t.jsx)(i.code,{children:"126"})]}),"\n",(0,t.jsxs)(i.p,{children:["The same thing as the vanilla ",(0,t.jsx)(i.code,{children:"POST_USE_PILL"})," callback, except this callback passes the\n",(0,t.jsx)(i.code,{children:"PillColor"})," of the used pill as the final argument. It allows you to filter by the ",(0,t.jsx)(i.code,{children:"PillColor"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["In order to accomplish this, this callback tracks the held pills of the player on every frame.\nIf a matching ",(0,t.jsx)(i.code,{children:"PillColor"})," could not be found, this callback passes ",(0,t.jsx)(i.code,{children:"PillColor.NULL"})," (0)."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PillEffect"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PillColor"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function postUsePillFilter(\n  pillEffect: PillEffect,\n  pillColor: PillColor,\n  player: EntityPlayer,\n  useFlags: BitFlags<UseFlag>,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-126",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2325",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2325"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_berserk_death",children:"PRE_BERSERK_DEATH"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_BERSERK_DEATH"})," = ",(0,t.jsx)(i.code,{children:"127"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"}),' callback on the frame before a Berserk effect\nends when the player is predicted to die (e.g. they currently have no health left or they took\ndamage in a "Lost" form).']}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preBerserkDeath(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-127",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2342",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2342"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_bomb_collision_filter",children:"PRE_BOMB_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_BOMB_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"128"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_BOMB_COLLISION"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"BombVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preBombCollisionFilter(\n  bomb: EntityBomb,\n  collider: Entity,\n  low: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-128",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2362",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2362"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_custom_revive",children:"PRE_CUSTOM_REVIVE"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_CUSTOM_REVIVE"})," = ",(0,t.jsx)(i.code,{children:"129"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PLAYER_FATAL_DAMAGE"})," callback when a player is about to die. If you want\nto initiate a custom revival, return an integer that corresponds to the item or type of revival\nthat you are doing. Otherwise, return undefined to continue the fatal damage."]}),"\n",(0,t.jsx)(i.p,{children:"This callback is useful because reviving the player after the game things that player should\nhave died will result in the save data for the run getting deleted."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preCustomRevive(player: EntityPlayer): int | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-129",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2382",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2382"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_entity_spawn_filter",children:"PRE_ENTITY_SPAWN_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_ENTITY_SPAWN_FILTER"})," = ",(0,t.jsx)(i.code,{children:"130"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_ENTITY_SPAWN"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preEntitySpawnFilter(\n  entityType: EntityType,\n  variant: int,\n  subType: int,\n  position: Vector,\n  velocity: Vector,\n  spawner: Entity | undefined,\n  initSeed: Seed,\n): [entityType: EntityType, variant: int, subType: int, initSeed: Seed] | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-130",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2408",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2408"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_familiar_collision_filter",children:"PRE_FAMILIAR_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_FAMILIAR_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"131"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_FAMILIAR_COLLISION"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"FamiliarVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preFamiliarCollisionFilter(\n  familiar: EntityFamiliar,\n  collider: Entity,\n  low: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-131",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2428",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2428"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_get_pedestal",children:"PRE_GET_PEDESTAL"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_GET_PEDESTAL"})," = ",(0,t.jsx)(i.code,{children:"132"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"PRE_PICKUP_COLLISION"})," callback when a player touches a collectible pedestal and\nmeets all of the conditions to pick it up."]}),"\n",(0,t.jsxs)(i.p,{children:["The return values of this callback are the same as the ",(0,t.jsx)(i.code,{children:"PRE_PICKUP_COLLISION"})," callback. For\nexample, you can prevent a player from picking up the collectible by returning false. (However,\nnote that this callback will continue to fire for every frame that the player touches the\npedestal, so you would need to continue returning false.)"]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerVariant"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"PlayerType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preGetPedestal(player: EntityPlayer, collectible: EntityPickupCollectible): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-132",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2449",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2449"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_item_pickup",children:"PRE_ITEM_PICKUP"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_ITEM_PICKUP"})," = ",(0,t.jsx)(i.code,{children:"133"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires from the ",(0,t.jsx)(i.code,{children:"POST_PEFFECT_UPDATE_REORDERED"})," callback when an item becomes queued (i.e. when\nthe player begins to hold the item above their head)."]}),"\n",(0,t.jsx)(i.p,{children:"Note that this callback will only fire once per Forgotten/Soul pair."}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ItemType"})," provided."]}),"\n",(0,t.jsxs)(i.li,{children:["You can provide an optional fourth argument that will make the callback only fire if the\nsub-type matches the ",(0,t.jsx)(i.code,{children:"CollectibleType"})," or the ",(0,t.jsx)(i.code,{children:"TrinketType"})," provided."]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preItemPickup(\n  player: EntityPlayer,\n  pickingUpItem: PickingUpItem,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-133",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2470",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2470"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_knife_collision_filter",children:"PRE_KNIFE_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_KNIFE_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"134"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_KNIFE_COLLISION"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"KnifeVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preKnifeCollisionFilter(\n  knife: EntityKnife,\n  collider: Entity,\n  low: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-134",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2490",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2490"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_new_level",children:"PRE_NEW_LEVEL"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_NEW_LEVEL"})," = ",(0,t.jsx)(i.code,{children:"135"})]}),"\n",(0,t.jsxs)(i.p,{children:["Fires on the ",(0,t.jsx)(i.code,{children:"POST_RENDER"})," frame before the player is taken to a new floor. Only fires when a\nplayer jumps into a trapdoor or enters a heaven door (beam of light). Does not fire on the\nfirst floor of the run. Does not fire when the player reloads/reseeds the current floor (i.e.\nForget Me Now, 5-pip dice room)."]}),"\n",(0,t.jsxs)(i.p,{children:["This callback passes the ",(0,t.jsx)(i.code,{children:"EntityPlayer"})," object for the player who jumped into the trapdoor or\nentered the heaven door, if needed."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preNewLevel(player: EntityPlayer): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-135",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2505",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2505"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_npc_collision_filter",children:"PRE_NPC_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_NPC_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"136"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_NPC_COLLISION"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preNPCCollisionFilter(\n  npc: EntityNPC,\n  collider: Entity,\n  low: boolean,\n): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-136",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2527",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2527"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_npc_update_filter",children:"PRE_NPC_UPDATE_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_NPC_UPDATE_FILTER"})," = ",(0,t.jsx)(i.code,{children:"137"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_NPC_UPDATE"})," callback, except this callback allows you\nto specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preNPCUpdateFilter(entity: Entity): boolean | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-137",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2545",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2545"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_projectile_collision_filter",children:"PRE_PROJECTILE_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_PROJECTILE_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"138"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_PROJECTILE_COLLISION"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"ProjectileVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preProjectileCollisionFilter(\n  tear: EntityTear,\n  collider: Entity,\n  low: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-138",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2565",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2565"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_room_entity_spawn_filter",children:"PRE_ROOM_ENTITY_SPAWN_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_ROOM_ENTITY_SPAWN_FILTER"})," = ",(0,t.jsx)(i.code,{children:"139"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_ROOM_ENTITY_SPAWN"})," callback, except this callback\nallows you to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"EntityType"})," or ",(0,t.jsx)(i.code,{children:"GridEntityXMLType"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the variant provided."}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fifth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["You can use the ",(0,t.jsx)(i.code,{children:"isGridEntityXMLType"})," helper function to convert the\n",(0,t.jsx)(i.code,{children:"entityTypeOrGridEntityXMLType"})," argument to an ",(0,t.jsx)(i.code,{children:"EntityType"})," or ",(0,t.jsx)(i.code,{children:"GridEntityXMLType"}),", if needed."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preRoomEntitySpawnFilter(\n  entityTypeOrGridEntityXMLType: EntityType | GridEntityXMLType,\n  variant: int,\n  subType: int,\n  gridIndex: int,\n  seed: Seed,\n): [type: EntityType | GridEntityXMLType, variant: int, subType: int] | undefined {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-139",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2592",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2592"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"pre_tear_collision_filter",children:"PRE_TEAR_COLLISION_FILTER"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"PRE_TEAR_COLLISION_FILTER"})," = ",(0,t.jsx)(i.code,{children:"140"})]}),"\n",(0,t.jsxs)(i.p,{children:["The exact same thing as the vanilla ",(0,t.jsx)(i.code,{children:"PRE_TEAR_COLLISION"})," callback, except this callback allows\nyou to specify extra arguments for additional filtration."]}),"\n",(0,t.jsxs)(i.p,{children:["When registering the callback with the ",(0,t.jsx)(i.code,{children:"ModUpgraded.AddCallbackCustom"})," method:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["You can provide an optional third argument that will make the callback only fire if it\nmatches the ",(0,t.jsx)(i.code,{children:"TearVariant"})," provided."]}),"\n",(0,t.jsx)(i.li,{children:"You can provide an optional fourth argument that will make the callback only fire if it\nmatches the sub-type provided."}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"function preTearCollisionFilter(\n  tear: EntityTear,\n  collider: Entity,\n  low: boolean,\n): void {}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-140",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/enums/ModCallbackCustom.ts#L2612",children:"packages/isaacscript-common/src/enums/ModCallbackCustom.ts:2612"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},71184:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>c});var t=n(14041);const a={},s=t.createContext(a);function l(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);