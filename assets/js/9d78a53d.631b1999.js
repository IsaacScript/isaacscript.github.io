"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7494],{81800:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(31085),i=t(71184);const r={custom_edit_url:null},a="Tears",l={id:"isaacscript-common/functions/tears",title:"Tears",description:"Functions",source:"@site/docs/isaacscript-common/functions/tears.md",sourceDirName:"isaacscript-common/functions",slug:"/isaacscript-common/functions/tears",permalink:"/isaacscript-common/functions/tears",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{custom_edit_url:null},sidebar:"isaacScriptCommon",previous:{title:"Table",permalink:"/isaacscript-common/functions/table"},next:{title:"Transformations",permalink:"/isaacscript-common/functions/transformations"}},c={},d=[{value:"Functions",id:"functions",level:2},{value:"addTearsStat",id:"addtearsstat",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getFireDelay",id:"getfiredelay",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getTearsStat",id:"gettearsstat",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"isMissedTear",id:"ismissedtear",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"isTearFromFamiliar",id:"istearfromfamiliar",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"isTearFromPlayer",id:"istearfromplayer",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tears",children:"Tears"}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"addtearsstat",children:"addTearsStat"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"addTearsStat"}),"(",(0,s.jsx)(n.code,{children:"player"}),", ",(0,s.jsx)(n.code,{children:"tearsStat"}),"): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Converts the specified amount of tears stat into the format of ",(0,s.jsx)(n.code,{children:"EntityPlayer.MaxFireDelay"})," and\nadds it to the player."]}),"\n",(0,s.jsxs)(n.li,{children:["This function should only be used inside the ",(0,s.jsx)(n.code,{children:"EVALUATE_CACHE"})," callback."]}),"\n",(0,s.jsx)(n.li,{children:'In this context, the "tears stat" represents what is shown on the in-game stat UI.'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function evaluateCacheTears(player: EntityPlayer) {\n  const numFoo = player.GetNumCollectible(CollectibleTypeCustom.FOO);\n  const tearsStat = numFoo * FOO_TEARS_STAT;\n  addTearsStat(player, tearsStat);\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"player"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"EntityPlayer"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"tearsStat"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"float"})})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L19",children:"packages/isaacscript-common/src/functions/tears.ts:19"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"getfiredelay",children:"getFireDelay"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"getFireDelay"}),"(",(0,s.jsx)(n.code,{children:"tearsStat"}),"): ",(0,s.jsx)(n.code,{children:"float"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"EntityPlayer"})," object stores a player's tear rate in the ",(0,s.jsx)(n.code,{children:"MaxFireDelay"})," field. This is\nequivalent to how many tears the player can shoot per frame."]}),"\n",(0,s.jsx)(n.li,{children:'If you already have a "tears" stat and you want to convert it back to MaxFireDelay, then use\nthis function.'}),"\n",(0,s.jsx)(n.li,{children:'In this context, the "tears stat" represents what is shown on the in-game stat UI.'}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"tearsStat"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"float"})})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"float"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L33",children:"packages/isaacscript-common/src/functions/tears.ts:33"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"gettearsstat",children:"getTearsStat"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"getTearsStat"}),"(",(0,s.jsx)(n.code,{children:"fireDelay"}),"): ",(0,s.jsx)(n.code,{children:"float"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"EntityPlayer"})," object stores a player's tear rate in the ",(0,s.jsx)(n.code,{children:"MaxFireDelay"})," field. This is\nequivalent to how many tears the player can shoot per frame."]}),"\n",(0,s.jsx)(n.li,{children:'If you want to convert this to the "tears" stat that is shown on the in-game stat UI, then use\nthis function.'}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"fireDelay"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"float"})})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"float"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L43",children:"packages/isaacscript-common/src/functions/tears.ts:43"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ismissedtear",children:"isMissedTear"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"isMissedTear"}),"(",(0,s.jsx)(n.code,{children:"tear"}),"): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsx)(n.p,{children:"Helper function to check if a tear hit an enemy. A tear is considered to be missed if it hit the\nground, a wall, or a grid entity."}),"\n",(0,s.jsxs)(n.p,{children:["Note that tears are still considered to be missed if they hit a poop or fire, so you may want to\nhandle those separately using the ",(0,s.jsx)(n.code,{children:"POST_GRID_ENTITY_COLLISION"})," and ",(0,s.jsx)(n.code,{children:"POST_ENTITY_COLLISION"}),"\ncallbacks, respectively."]}),"\n",(0,s.jsxs)(n.p,{children:["Under the hood, this function uses the ",(0,s.jsx)(n.code,{children:"Entity.IsDead"})," method. (Tears will not die if they hit an\nenemy, but they will die if they hit a wall or object.)"]}),"\n",(0,s.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"tear"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"EntityTear"})})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L58",children:"packages/isaacscript-common/src/functions/tears.ts:58"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"istearfromfamiliar",children:"isTearFromFamiliar"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"isTearFromFamiliar"}),"(",(0,s.jsx)(n.code,{children:"tear"}),", ",(0,s.jsx)(n.code,{children:"familiarVariant?"}),", ",(0,s.jsx)(n.code,{children:"subType?"}),"): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsx)(n.p,{children:"Helper function to check if a given tear is from a familiar (as opposed to e.g. a player). This\nis determined by looking at the parent."}),"\n",(0,s.jsxs)(n.p,{children:["For the special case of Incubus and Blood Babies, the parent of the tear is always the player,\nbut the spawner entity of the tear changes. On frame 0, the spawner entity is equal to the\nplayer, and on frame 1, the spawner entity is equal to the familiar. For this reason, you can\nonly use this function in the ",(0,s.jsx)(n.code,{children:"POST_TEAR_INIT_VERY_LATE"})," callback or on frame 1+."]}),"\n",(0,s.jsx)(n.p,{children:"If this function is called on frame 0, it will throw a run-time error."}),"\n",(0,s.jsx)(n.p,{children:"Note that this function does not work properly when the tear is from a Lead Pencil barrage. In\nthis case, it will always appear as if the tear is coming from a player."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"tear"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"EntityTear"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The tear to inspect."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"familiarVariant?"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"FamiliarVariant"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Optional. Specify this to check if the tear came from a specific familiar variant. Default is undefined, which checks for any familiar."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"subType?"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Optional. Specify this to check if the tear came from a specific familiar sub-type. Default is undefined, which checks for any familiar."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L82",children:"packages/isaacscript-common/src/functions/tears.ts:82"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"istearfromplayer",children:"isTearFromPlayer"}),"\n",(0,s.jsxs)(n.p,{children:["\u25b8 ",(0,s.jsx)(n.strong,{children:"isTearFromPlayer"}),"(",(0,s.jsx)(n.code,{children:"tear"}),"): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsxs)(n.p,{children:["Helper function to check if a given tear is from a player (as opposed to e.g. a familiar). This\nis determined by looking at the ",(0,s.jsx)(n.code,{children:"SpawnerEntity"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["For the special case of Incubus and Blood Babies, the ",(0,s.jsx)(n.code,{children:"SpawnerEntity"})," of the tear is always the\nplayer, but the spawner entity of the tear changes. On frame 0, the spawner entity is equal to\nthe player, and on frame 1, the spawner entity is equal to the familiar. For this reason, you can\nonly use this function in the ",(0,s.jsx)(n.code,{children:"POST_TEAR_INIT_VERY_LATE"})," callback or on frame 1+."]}),"\n",(0,s.jsx)(n.p,{children:"If this function is called on frame 0, it will throw a run-time error."}),"\n",(0,s.jsx)(n.p,{children:"Note that this function does not work properly when the tear is from a Lead Pencil barrage. In\nthis case, it will always appear as if the tear is coming from a player."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"tear"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"EntityTear"})})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/IsaacScript/isaacscript/blob/54ef116/packages/isaacscript-common/src/functions/tears.ts#L125",children:"packages/isaacscript-common/src/functions/tears.ts:125"})})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(14041);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);